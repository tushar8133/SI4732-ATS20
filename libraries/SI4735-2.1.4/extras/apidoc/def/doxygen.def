AutoGen Definitions dummy;
class = {
  cp-id     = 'class_s_i4735';
  cp-name   = 'SI4735';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a818c60896490631e4311452c99ff361f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SI4735';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1131';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Construct a new SI4735::SI4735.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This class has a set of functions that can help you to build your receiver based on Si47XX IC family.


This library uses the IÂ²C communication protocol and implements most of the functions offered by Si47XX (BROADCAST AM / FM / SW / LW RADIO RECEIVER) IC family from Silicon Labs. 


Currently you have more than 120 functions implemented to control the Si47XX devices. These functions are listed and documented here.


Some methods were implemented using inline resource. Inline methods are implemented in SI4735.h

IMPORTANT: According to Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 207, "For write operations, the system controller next 
sends a data byte on SDIO, which is captured by the device on rising edges of SCLK. The device acknowledges 
each data byte by driving SDIO low for one cycle on the next falling edge of SCLK. 
The system controller may write up to 8 data bytes in a single 2-wire transaction. 
The first byte is a command, and the next seven bytes are arguments. Writing more than 8 bytes results 
in unpredictable device behavior". So, If you are extending this library, consider that restriction presented earlier.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gadc6014674bd4d1ee3aab56c605926db1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reset';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1132';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reset the SI473X  
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0);
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga8eddbfb3e62786aa4843d4bcd25da2b9';
        sec-mem-ref-line = '224';
        sec-mem-ref-name = 'getDeviceI2CAddress';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf8d0ff88ec989d714ab63da39f3897b4';
        sec-mem-ref-line = '574';
        sec-mem-ref-name = 'setup';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'waitToSend';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1133';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Wait for the si473x is ready (Clear to Send (CTS) status bit have to be 1).  
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function should be used before sending any command to a SI47XX device.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 63, 128
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaaae187575b9868ff427c063c3a6cca2a';
        sec-mem-ref-line = '999';
        sec-mem-ref-name = 'getAutomaticGainControl';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gab4c50abd500f55427a4d1d2273b45e3a';
        sec-mem-ref-line = '1536';
        sec-mem-ref-name = 'getCommandResponse';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gabf59183da13c72384093fc238c3114cf';
        sec-mem-ref-line = '1105';
        sec-mem-ref-name = 'getCurrentReceivedSignalQuality';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga2fbc7e2187a7c645879623100dbc8502';
        sec-mem-ref-line = '476';
        sec-mem-ref-name = 'getFirmware';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf361734168c913803e7e2dfbf4fe0c55';
        sec-mem-ref-line = '83';
        sec-mem-ref-name = 'getInterruptStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gace60b9db8033c689247dc1370be367b6';
        sec-mem-ref-line = '1582';
        sec-mem-ref-name = 'getProperty';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga350a2033671a7620d4b9290a2347e185';
        sec-mem-ref-line = '2097';
        sec-mem-ref-name = 'getRdsStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5507f4d98f389247320eb19b16395a27';
        sec-mem-ref-line = '3023';
        sec-mem-ref-name = 'getSsbAgcStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5c0f4036a7fbbd11a26f1f6f4579d3cd';
        sec-mem-ref-line = '951';
        sec-mem-ref-name = 'getStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gafaabd6c73b7ad7c20ae959d5b75c1e71';
        sec-mem-ref-line = '3138';
        sec-mem-ref-name = 'patchPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gabed83f2c503dc3b35ca115ef6b08d552';
        sec-mem-ref-line = '3510';
        sec-mem-ref-name = 'patchPowerUpNBFM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa554b3390fb6c5a4d6661b96afae73ae';
        sec-mem-ref-line = '454';
        sec-mem-ref-name = 'powerDown';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadfc2c82524918224cf19fec5b7fcf6d1';
        sec-mem-ref-line = '3097';
        sec-mem-ref-name = 'queryLibraryId';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '404';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3280b98b8331f00b4d0158ef1b076533';
        sec-mem-ref-line = '1172';
        sec-mem-ref-name = 'seekStation';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3d2342264b36bd524ccbaf898e4d219b';
        sec-mem-ref-line = '1514';
        sec-mem-ref-name = 'sendCommand';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga4d65660ec2b60d7486165ed8a7a92015';
        sec-mem-ref-line = '1482';
        sec-mem-ref-name = 'sendProperty';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '2997';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga27c22f5671ce3229e925e5fbe93ba0a6';
        sec-mem-ref-line = '1044';
        sec-mem-ref-name = 'setAutomaticGainControl';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga8755743a36d2d4662c8db918d02ee4e1';
        sec-mem-ref-line = '889';
        sec-mem-ref-name = 'setBandwidth';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga63d205f2d3169ba877a2bd2ee28d224f';
        sec-mem-ref-line = '683';
        sec-mem-ref-name = 'setFrequency';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5c8c57c727fd102f0eb3d59ec995692f';
        sec-mem-ref-line = '3612';
        sec-mem-ref-name = 'setFrequencyNBFM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5e5018897af1edc1ca8507af3d3bfc5e';
        sec-mem-ref-line = '158';
        sec-mem-ref-name = 'setGpio';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga0d615c1fcfeb570effc97e8b7e959106';
        sec-mem-ref-line = '119';
        sec-mem-ref-name = 'setGpioCtl';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gad9718a85c79a311c26997bbda20f2351';
        sec-mem-ref-line = '2009';
        sec-mem-ref-name = 'setRdsConfig';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaddfe8c89101b4859eca31ad68ad9de2e';
        sec-mem-ref-line = '2055';
        sec-mem-ref-name = 'setRdsIntSource';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga2da03a7257b7ca821f984bfa7fef97fa';
        sec-mem-ref-line = '3050';
        sec-mem-ref-name = 'setSsbAgcOverrite';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga55cf9a091d314a1aa21552f2254f756f';
        sec-mem-ref-line = '2752';
        sec-mem-ref-name = 'setSSBBfo';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga0fcfd8e487c594707b3f2aaa71a86d68';
        sec-mem-ref-line = '3154';
        sec-mem-ref-name = 'ssbPowerUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga0d615c1fcfeb570effc97e8b7e959106';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setGpioCtl';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO1OEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO2OEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO3OEN';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1135';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enables output for GPO1, 2, and 3.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
GPO1, 2, and 3 can be configured for output (Hi-Z or active drive) by setting the GPO1OEN, GPO2OEN, and GPO3OEN bit. 


The state (high or low) of GPO1, 2, and 3 is set with the GPIO_SET command. 


To avoid excessive current consumption due to oscillation, GPO pins should not be left in a high impedance state.

<table class="markdownTable">  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> GPIO Output Enable</th>    <th class="markdownTableHeadNone"> value 0</th>    <th class="markdownTableHeadNone"> value 1</th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> GPO1OEN</td>    <td class="markdownTableBodyNone"> Output Disabled (Hi-Z) (default)</td>    <td class="markdownTableBodyNone"> Output Enabled</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> GPO2OEN</td>    <td class="markdownTableBodyNone"> Output Disabled (Hi-Z) (default)</td>    <td class="markdownTableBodyNone"> Output Enabled</td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> GPO3OEN</td>    <td class="markdownTableBodyNone"> Output Disabled (Hi-Z) (default)</td>    <td class="markdownTableBodyNone"> Output Enabled</td>  </tr>
</table>

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 82 and 144

@param GPO1OEN 
@param GPO2OEN 
@param GPO3OEN 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga5e5018897af1edc1ca8507af3d3bfc5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setGpio';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO1LEVEL';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO2LEVEL';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO3LEVEL';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1136';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the output level (high or low) for GPO1, 2, and 3.  
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
GPO1, 2, and 3 can be configured for output by setting the GPO1OEN, GPO2OEN, and GPO3OEN bit in the GPIO_CTL command. 


To avoid excessive current consumption due to oscillation, GPO pins should not be left in a high impedance state.


To avoid excessive current consumption due to oscillation, GPO pins should not be left in a high impedance state.

<table class="markdownTable">  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> GPIO Output Enable</th>    <th class="markdownTableHeadNone"> value 0</th>    <th class="markdownTableHeadNone"> value 1</th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> GPO1LEVEL</td>    <td class="markdownTableBodyNone"> Output low (default)</td>    <td class="markdownTableBodyNone"> Output high</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> GPO2LEVEL</td>    <td class="markdownTableBodyNone"> Output low (default)</td>    <td class="markdownTableBodyNone"> Output high</td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> GPO3LEVEL</td>    <td class="markdownTableBodyNone"> Output low (default)</td>    <td class="markdownTableBodyNone"> Output high</td>  </tr>
</table>

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 83 and 145

@param GPO1LEVEL
@param GPO2LEVEL
@param GPO3LEVEL
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga6806bca795400959f36e8202e36cd94c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setGpioIen';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'STCIEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RSQIEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ERRIEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'CTSIEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'STCREP';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RSQREP';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1137';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Configures the sources for the GPO2/INT interrupt pin.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Valid sources are the lower 8 bits of the STATUS byte, including CTS, ERR, RSQINT, and STCINT bits. 


The corresponding bit is set before the interrupt occurs. The CTS bit (and optional interrupt) is set when it is safe to send the next command. 


The CTS interrupt enable (CTSIEN) can be set with this property and the POWER_UP command.


The state of the CTSIEN bit set during the POWER_UP command can be read by reading this property and modified by writing this property. 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 146 

@param STCIEN Seek/Tune Complete Interrupt Enable (0 or 1).
@param RSQIEN RSQ Interrupt Enable (0 or 1).
@param ERRIEN ERR Interrupt Enable (0 or 1).
@param CTSIEN CTS Interrupt Enable (0 or 1).
@param STCREP STC Interrupt Repeat (0 or 1).
@param RSQREP RSQ Interrupt Repeat(0 or 1).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga944ed704e2175a6cf660ad65ca5bbad5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setup';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'resetPin';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'defaultFunction';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1139';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Starts the Si473X device.  
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Use this setup if you are not using interrupt resource.


If the audio mode parameter is not entered, analog mode will be considered.


You can use any Arduino digital pin. Be sure you are using less than 3.6V on Si47XX RST pin.   
<br>

@param uint8_t resetPin Digital Arduino Pin used to RESET command. 
@param uint8_t defaultFunction. 0 =  FM mode; 1 = AM 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1gaf8d0ff88ec989d714ab63da39f3897b4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setup';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'resetPin';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ctsIntEnable';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'defaultFunction';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'audioMode';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
SI473X_ANALOG_AUDIO
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'clockType';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
XOSCEN_CRYSTAL
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'gpo2Enable';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1140';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Starts the Si473X device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Use this function to start the device up with the parameters shown below.


If the audio mode parameter is not entered, analog mode will be considered.


You can use any Arduino digital pin. Be sure you are using less than 3.6V on Si47XX RST pin.   
<br>

ATTENTION: The document AN383; "Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES"; rev 0.8; page 6; there is the following note:
           Crystal and digital audio mode cannot be used at the same time. Populate R1 and remove C10, C11, and X1 when using digital audio.

@param resetPin Digital Arduino Pin used to RESET de Si47XX device. 
@param ctsIntEnable CTS Interrupt Enable.
@param defaultFunction is the mode you want the receiver starts.
@param audioMode default SI473X_ANALOG_AUDIO (Analog Audio). Use SI473X_ANALOG_AUDIO or SI473X_DIGITAL_AUDIO.
@param clockType 0 = Use external RCLK (crystal oscillator disabled); 1 = Use crystal oscillator 
@param gpo2Enable GPO2OE (GPO2 Output) 1 = Enable; 0 Disable (defult) 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga2fbc7e2187a7c645879623100dbc8502';
        sec-mem-ref-line = '476';
        sec-mem-ref-name = 'getFirmware';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '404';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadc6014674bd4d1ee3aab56c605926db1';
        sec-mem-ref-line = '297';
        sec-mem-ref-name = 'reset';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga54a3a0f412aa6318df0046d478bd134f';
        sec-mem-ref-line = '2675';
        sec-mem-ref-name = 'setHardwareAudioMute';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga56d6eebe36f8178efc080e6e134e0b9b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRefClock';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'refclk';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1142';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the frequency of the REFCLK from the output of the prescaler.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The REFCLK range is 31130 to 34406 Hz (32768 Â±5% Hz) in 1 Hz steps, or 0 (to disable AFC). For example, an RCLK of 13 MHz would require a prescaler value of 400 to divide it to 32500 Hz REFCLK.


The reference clock frequency property would then need to be set to 32500 Hz. 


RCLK frequencies between 31130 Hz and 40 MHz are supported, however, there are gaps in frequency coverage for prescaler values ranging from 1 to 10, or frequencies up to 311300 Hz. See table below.

Table REFCLK Prescaler
<table class="markdownTable">  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Prescaler</th>    <th class="markdownTableHeadNone"> RCLK Low (Hz)</th>    <th class="markdownTableHeadNone"> RCLK High (Hz)</th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 1</td>    <td class="markdownTableBodyNone"> 31130</td>    <td class="markdownTableBodyNone"> 34406</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 2</td>    <td class="markdownTableBodyNone"> 62260</td>    <td class="markdownTableBodyNone"> 68812</td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 3</td>    <td class="markdownTableBodyNone"> 93390</td>    <td class="markdownTableBodyNone"> 103218</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 4</td>    <td class="markdownTableBodyNone"> 124520</td>    <td class="markdownTableBodyNone"> 137624</td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 5</td>    <td class="markdownTableBodyNone"> 155650</td>    <td class="markdownTableBodyNone"> 172030</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 6</td>    <td class="markdownTableBodyNone"> 186780</td>    <td class="markdownTableBodyNone"> 206436</td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 7</td>    <td class="markdownTableBodyNone"> 217910</td>    <td class="markdownTableBodyNone"> 240842</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 8</td>    <td class="markdownTableBodyNone"> 249040</td>    <td class="markdownTableBodyNone"> 275248</td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 9</td>    <td class="markdownTableBodyNone"> 280170</td>    <td class="markdownTableBodyNone"> 309654</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 10</td>    <td class="markdownTableBodyNone"> 311300</td>    <td class="markdownTableBodyNone"> 344060</td>  </tr>
</table>

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 34 and 35

@param refclk The allowed REFCLK frequency range is between 31130 and 34406 Hz (32768 Â±5%), or 0 (to disable AFC).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1gadafdd29bf1d22e43199abc4c2ac7b231';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRefClockPrescaler';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'prescale';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'rclk_sel';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1143';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the number used by the prescaler to divide the external RCLK down to the internal REFCLK.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The range may be between 1 and 4095 in 1 unit steps.


For example, an RCLK of 13 MHz would require a prescaler value of 400 to divide it to 32500 Hz. The reference clock frequency property would then need to be set to 32500 Hz.


ATTENTION by default, this function considers you are using the RCLK pin as clock source.


Example: The code below shows the setup for an active 4.9152MHz crystal
@code 
  rx.setRefClock(32768);
  rx.setRefClockPrescaler(150); // will work with 4915200Hz active crystal => 4.9152MHz => (32768 x 150)
  rx.setup(RESET_PIN, 0, POWER_UP_AM, SI473X_ANALOG_AUDIO, XOSCEN_RCLK);
@endcode


Example: The code below shows the setup for an active 13MHz crystal
@code 
  rx.setRefClock(32500);
  rx.setRefClockPrescaler(400); // 32500 x 400 = 13000000 (13MHz)
  rx.setup(RESET_PIN, 0, POWER_UP_AM, SI473X_ANALOG_AUDIO, XOSCEN_RCLK);
@endcode
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 34 and 35

@param prescale  Prescaler for Reference Clock value; Between 1 and 4095 in 1 unit steps. Default is 1.
@param rclk_sel  0 = RCLK pin is clock source (default); 1 = DCLK pin is clock source
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1gace60b9db8033c689247dc1370be367b6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getProperty';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'propertyValue';
        sec-mem-param-defname = 'propertyNumber';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1145';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets a given property from the SI47XX.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This method is used to get a given property from SI47XX


You might need to extract set of bits information from the returned value to know the real value

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 55, 69, 124 and  134.
@see sendProperty, setProperty, sendCommand, getCommandResponse

@param propertyNumber property number (example: RX_VOLUME)

@return property value  (the content of the property)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1ga27549ef05fa62f60e4ac205c16b8f764';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setProperty';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'propertyNumber';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'param';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1161';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets a given SI47XX device property.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets the Si47XX device with a given attribute. 


You might need to use the bit operations or some bit field structure to set right the values.


Used this function instead of the sendProperty.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 55, 69, 124 and  134.
@see getProperty, sendProperty
@param propertyNumber
@param param  pamameter value 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1ga3d2342264b36bd524ccbaf898e4d219b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sendCommand';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'cmd';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter_size';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1166';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sends a given command to the SI47XX devices.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function can be useful when you want to execute a SI47XX device command and it was not implemented by this library.


In this case you have to check the  AN332-Si47XX PROGRAMMING GUIDE to know how the command works. 


Also, you need to work with bit operators to compose the parameters of the command [ &(and), Ë(xor), |(or) etc ].   
<br>

@see getCommandResponse, setProperty

@param cmd command number (see AN332-Si47XX PROGRAMMING GUIDE)
@param parameter_size Parameter size in bytes. Tell the number of argument used by the command.
@param parameter unsigned byte array with the arguments of the command  
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1gab4c50abd500f55427a4d1d2273b45e3a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCommandResponse';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'num_of_bytes';
        sec-mem-param-defname = 'response_size';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'response';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1167';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns with the command response.  
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
After a command is executed by the device, you can get the result (response) of the command by calling this method.

@see sendCommand, setProperty

@param response_size  num of bytes returned by the command.
@param response  byte array where the response will be stored.     
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1gaf0ce36e251cbd826d4dee7687c1bc31a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusResponse';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1168';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the first byte response.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
In this context status is the first response byte for any SI47XX command. See si47x_status structure. 


This function can be useful to check, for example, the success or failure of a command. 

@see si47x_status

@return si47x_status 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga8bc001cb28dc8fbd88ba0fa7024eca39';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setPowerUp';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'CTSIEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'GPO2OEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'PATCH';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'XOSCEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'FUNC';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'OPMODE';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1170';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Power Up parameters for si473X.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Use this method to chenge the defaul behavior of the Si473X. Use it before PowerUp()


About the parameter XOSCEN: 


0 = Use external RCLK (crystal oscillator disabled);


1 = Use crystal oscillator (RCLK and GPO3/DCLK with external 32.768 kHz crystal and OPMODE = 01010000). 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 65 and 129

@param uint8_t CTSIEN sets Interrupt anabled or disabled (1 = anabled and 0 = disabled )
@param uint8_t GPO2OEN sets GP02 Si473X pin enabled (1 = anabled and 0 = disabled )
@param uint8_t PATCH  Used for firmware patch updates. Use it always 0 here. 
@param uint8_t XOSCEN sets external Crystal enabled or disabled. 0 = Use external RCLK (crystal oscillator disabled); 1 = Use crystal oscillator  
<br>
@param uint8_t FUNC sets the receiver function have to be used [0 = FM Receive; 1 = AM (LW/MW/SW) and SSB (if SSB patch apllied)]
@param uint8_t OPMODE set the kind of audio mode you want to use.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga3e228da65641f4dcf4253262e19bde9b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'radioPowerUp';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1171';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Powerup the Si47XX.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Before call this function call the setPowerUp to set up the parameters.



Parameters you have to set up with setPowerUp

<table class="markdownTable">  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Parameter</th>    <th class="markdownTableHeadNone"> Description</th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> CTSIEN</td>    <td class="markdownTableBodyNone"> Interrupt anabled or disabled</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> GPO2OEN</td>    <td class="markdownTableBodyNone"> GPO2 Output Enable or disabled</td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> PATCH</td>    <td class="markdownTableBodyNone"> Boot normally or patch</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> XOSCEN</td>    <td class="markdownTableBodyNone"> 0 (XOSCEN_RCLK) = external active crystal oscillator. 1 (XOSCEN_CRYSTAL) = passive crystal oscillator;</td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> FUNC</td>    <td class="markdownTableBodyNone"> defaultFunction = 0 = FM Receive; 1 = AM (LW/MW/SW) Receiver</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> OPMODE</td>    <td class="markdownTableBodyNone"> SI473X_ANALOG_AUDIO (B00000101) or SI473X_DIGITAL_AUDIO (B00001011)</td>  </tr>
</table>

 ATTENTION: The document AN383; "Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES"; rev 0.8; page 6; there is the following note:
            Crystal and digital audio mode cannot be used at the same time. Populate R1 and remove C10, C11, and X1 when using digital audio.

see setMaxDelaySetFrequency()
 @see MAX_DELAY_AFTER_POWERUP
 @see XOSCEN_CRYSTAL
 @see XOSCEN_RCLK
 @see  SI4735::setPowerUp()
 @see  Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64, 129
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga54a3a0f412aa6318df0046d478bd134f';
        sec-mem-ref-line = '2675';
        sec-mem-ref-name = 'setHardwareAudioMute';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga412f51386c47a17cf04fd0a3c3078726';
        sec-mem-ref-line = '439';
        sec-mem-ref-name = 'analogPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga753390952a1f2c2a98343979f1f3daa0';
        sec-mem-ref-line = '760';
        sec-mem-ref-name = 'setAM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gacd89e7b8adefcbc4e89f802acb915906';
        sec-mem-ref-line = '785';
        sec-mem-ref-name = 'setFM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga505445484e643ae95a2a9300eac9c4c1';
        sec-mem-ref-line = '3553';
        sec-mem-ref-name = 'setNBFM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e907ddf560a0c8286fa55768701b3da';
        sec-mem-ref-line = '2944';
        sec-mem-ref-name = 'setSSB';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf8d0ff88ec989d714ab63da39f3897b4';
        sec-mem-ref-line = '574';
        sec-mem-ref-name = 'setup';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga412f51386c47a17cf04fd0a3c3078726';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'analogPowerUp';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1172';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
You have to call setPowerUp method before.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function is still available only for legacy reasons. 
         If you are using this function, please, replace it by radioPowerup().
 \xrefitem deprecated 1.@see  SI4735::setPowerUp()
@see  Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64, 129
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '404';
        sec-mem-ref-name = 'radioPowerUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1gaa554b3390fb6c5a4d6661b96afae73ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'powerDown';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1173';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Moves the device from powerup to powerdown mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
After Power Down command, only the Power Up command is accepted.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 67, 132
@see radioPowerUp()
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga54a3a0f412aa6318df0046d478bd134f';
        sec-mem-ref-line = '2675';
        sec-mem-ref-name = 'setHardwareAudioMute';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadfc2c82524918224cf19fec5b7fcf6d1';
        sec-mem-ref-line = '3097';
        sec-mem-ref-name = 'queryLibraryId';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga753390952a1f2c2a98343979f1f3daa0';
        sec-mem-ref-line = '760';
        sec-mem-ref-name = 'setAM';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gacd89e7b8adefcbc4e89f802acb915906';
        sec-mem-ref-line = '785';
        sec-mem-ref-name = 'setFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga63d205f2d3169ba877a2bd2ee28d224f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequency';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-defname = 'freq';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1175';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the frequency to the corrent function of the Si4735 (FM, AM or SSB)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
You have to call setup or setPowerUp before call setFrequency.

@see maxDelaySetFrequency()
@see MAX_DELAY_AFTER_SET_FREQUENCY
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 70, 135
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 13

@param uint16_t  freq is the frequency to change. For example, FM => 10390 = 103.9 MHz; AM => 810 = 810 kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga5c0f4036a7fbbd11a26f1f6f4579d3cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatus';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-defname = 'INTACK';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-defname = 'CANCEL';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1177';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current status  of the Si4735 (AM or FM)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 73 (FM) and 139 (AM)

@param uint8_t INTACK Seek/Tune Interrupt Clear. If set, clears the seek/tune complete interrupt status indicator;
@param uint8_t CANCEL Cancel seek. If set, aborts a seek currently in progress;
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga7e88bb573604d465536c13554d5c61f8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFrequency';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1179';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current frequency of the Si4735 (AM or FM)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The method status do it an more. See getStatus below. 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 73 (FM) and 139 (AM)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gad194137a6a712a599e3c26e5b6357594';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getSignalQualityInterrupt';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1193';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Signal Quality Interrupt status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
STATUS RESPONSE
Set of methods to get current status information. Call them after getStatus or getFrequency or seekStation
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 63

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 63            
<br>
@return RDSINT status
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga97dc44d9927ea58730a18fb6baa6867f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRadioDataSystemInterrupt';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1204';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Radio Data System (RDS) Interrupt status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 63
@return RDSINT status  
<br>
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga2cc659bddc5efc7695f2a6031c2edd4b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getTuneCompleteTriggered';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1215';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Tune Complete status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Seek/Tune Complete Interrupt; 1 = Tune complete has been triggered.
@return STCINT status  
<br>
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga69723840497ed693d6f9a4e840ab07c9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusError';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1226';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Status Error.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Return the Error flag (true or false) of status of the least Tune or Seek
@return Error flag 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gafcb38f53b6eb71cadcefa0bb472ca943';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusCTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1237';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Error flag Clear to Send.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return CTS 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gab8a51de592fd40fdd872039b3c70716f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getACFIndicator';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1245';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if the AFC rails (AFC Rail Indicator).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga19e96565a2dec7ec68469f45c8d3e084';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getBandLimit';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1258';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if a seek hit the band limit.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
(WRAP = 0 in FM_START_SEEK) or wrapped to the original frequency(WRAP = 1).

@return BLTF 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gafb19da8a05320d7f38cca8325725edfd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusValid';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1272';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the channel status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns true if the channel is currently valid as determined by the seek/tune properties (0x1403, 0x1404, 0x1108)

@return true 
@return false 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaeeefd12b49dbc764e0f45fe208441482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getReceivedSignalStrengthIndicator';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1283';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the value of  Received Signal Strength Indicator (dBÎ¼V).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gac0bd4daaa321ef8956dca4d1e4e5cd3c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusSNR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1296';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the SNR metric when tune is complete (dB)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns the value  of the SNR metric when tune is complete (dB).

@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga0f9b5438a6f92c8f2e538ee640f353ab';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatusMULT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1309';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Status the M U L T.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns the value containing the multipath metric when tune is complete.

@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga5a10cea82279f48a13d40298cf79e6ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getAntennaTuningCapacitor';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1323';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Antenna Tuning Capacitor value.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns the current antenna tuning capacitor value. The tuning capacitance is 95 fF x READANTCAP + 7 pF.


ON AM or SSB mode, the MULT attribute sotores the high byte of READANTCAP and the attribute READANTCAP by itself stores the low byte.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 74,74, 140 and 141.
@return uint8_t capacitance 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaaae187575b9868ff427c063c3a6cca2a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getAutomaticGainControl';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1337';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Queries Automatic Gain Control STATUS.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
After call this method, you can call isAgcEnabled to know the AGC status and getAgcGainIndex to know the gain index value.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); For FM page 80; for AM page 142.
@see AN332 REV 0.8 Universal Programming Guide Amendment for SI4735-D60 SSB and NBFM patches; page 18. 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga6e1e0e48d71e09debb07fc6dbe884829';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAvcAmMaxGain';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1343';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Avc Am Max Gain to maximum gain (0x7800)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gaf2f9f04bd7f05a882c39621db162c027';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAvcAmMinGain';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1353';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Avc Am Max Gain to minimal gain (0x1000)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga4333e267458eb9b00a9319f81255c0f1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAvcAmDefaultGain';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1363';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Avc Am Max Gain to default gain (0x2A80)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga611982795f2e45990c195c3ff09adb96';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAvcAmMaxGain';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'gain';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
90
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1370';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the maximum gain for automatic volume control.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets the gain for automatic volume control.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 152
@see setAvcAmMaxGain()

@param uint8_t gain  Select a value between 12 and 90.  Defaul value 48dB.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga27dd7dfd46583eb5be91cfc9461807ff';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentAvcAmMaxGain';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1378';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the current Avc Am Max Gain.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t Current AVC gain index value
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga05bbe1546d61d7ca3591824445084e70';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAmSoftMuteMaxAttenuation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'smattn';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1394';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Am Soft Mute Max Attenuation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function can be useful to disable Soft Mute. The value 0 disable soft mute.


Specified in units of dB. Default maximum attenuation is 8 dB. It works for AM and SSB.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 158. 

@param smattn Maximum attenuation to apply when in soft mute
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga7f9f0eb9946d629e2e6d7e7901af86b9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbSoftMuteMaxAttenuation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'smattn';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1408';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SSB Soft Mute Max Attenuation object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets maximum attenuation during soft mute (dB). Set to 0 to disable soft mute. 


Specified in units of dB. Default maximum attenuation is 8 dB.


You can use setAmSoftMuteMaxAttenuation instead. Same AM property values.  
<br>
@param smattn Maximum attenuation to apply when in soft mute.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gaa42de6f58ebc0d9bc2693477b5fe7734';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbIfAgcReleaseRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'param';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
140
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1420';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the number of milliseconds the low IF peak detector.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets the number of milliseconds the low IF peak detector must not be exceeded before increasing the gain. Default value is 140 (approximately 40 dB / s).
@param param number of milliseconds ( from 4 to 248; step 4); default value 0x008C (140).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga2852abc7a2469362f1c1fe64758693a6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbIfAgcAttackRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'param';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1432';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the IF AGC attack rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Large values provide slower attack, and smaller values provide faster attack
@param param number of milliseconds ( from 4 to 248; step 4); default value 4.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaea08b7e553212cbe01bf6f4ec9e02de7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isAgcEnabled';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1443';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if the AGC is enabled.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true if the AGC is enabled 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga4eceaf5745e87fcca6cf31c04c5635bd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getAgcGainIndex';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1454';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current AGC gain index.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t The current AGC gain index.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga27c22f5671ce3229e925e5fbe93ba0a6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAutomaticGainControl';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AGCDIS';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AGCIDX';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1459';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Automatic Gain Control setup.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
If FM, overrides AGC setting by disabling the AGC and forcing the LNA to have a certain gain that ranges between 0 
(minimum attenuation) and 26 (maximum attenuation).


If AM/SSB, Overrides the AGC setting by disabling the AGC and forcing the gain index that ranges between 0 
(minimum attenuation) and 37+ATTN_BACKUP (maximum attenuation).

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); For FM page 81; for AM page 143 

@param uint8_t AGCDIS This param selects whether the AGC is enabled or disabled (0 = AGC enabled; 1 = AGC disabled);
@param uint8_t AGCIDX AGC Index (0 = Minimum attenuation (max gain); 1 â 36 = Intermediate attenuation); 
               if >greater than 36 - Maximum attenuation (min gain) ).
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga2da03a7257b7ca821f984bfa7fef97fa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbAgcOverrite';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SSBAGCDIS';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SSBAGCNDX';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'reserved';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1460';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Automatic Gain Control setup.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
<br>



Overrides the SSB AGC setting by disabling the AGC and forcing the gain index that ranges between 0 (minimum attenuation) and 37+ATTN_BACKUP (maximum attenuation). 

@param uint8_t SSBAGCDIS This param selects whether the AGC is enabled or disabled (0 = AGC enabled; 1 = AGC disabled);
@param uint8_t SSBAGCNDX If 1, this byte forces the AGC gain index. if 0,  Minimum attenuation (max gain)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gabf59183da13c72384093fc238c3114cf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentReceivedSignalQuality';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'INTACK';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1462';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Queries the status of the Received Signal Quality (RSQ) of the current channel.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This method sould be called berore call getCurrentRSSI(), getCurrentSNR() etc.
Command FM_RSQ_STATUS

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 75 and 141

@param INTACK Interrupt Acknowledge. 
       0 = Interrupt status preserved; 
       1 = Clears RSQINT, BLENDINT, SNRHINT, SNRLINT, RSSIHINT, RSSILINT, MULTHINT, MULTLINT.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga7393fa4f9d7811c8d0c0f48283ef6435';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentReceivedSignalQuality';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1463';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Queries the status of the Received Signal Quality (RSQ) of the current channel (FM_RSQ_STATUS)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 75 and 141

@param INTACK Interrupt Acknowledge. 
       0 = Interrupt status preserved; 
       1 = Clears RSQINT, BLENDINT, SNRHINT, SNRLINT, RSSIHINT, RSSILINT, MULTHINT, MULTLINT.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga4f5abf562ec00767a3b84f74eba5ac4d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentRSSI';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1473';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the current receive signal strength (0â127 dBÎ¼V)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t a value between 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gadb3fe55583dafeac7439a303b637d162';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentSNR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1484';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current SNR metric (0â127 dB).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t SNR value in dB (0-127)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga0c9ae82012cdc97c4080b84e37fa1820';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentRssiDetectLow';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1495';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if RSSI detected is LOW.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true if RSSI is low
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gadf11a66236392ca107b5d52a8747f838';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentRssiDetectHigh';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1506';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if RSSI detected is high.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true if RSSI detected is high
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga1296592571c85b89ed59a4ee2324bd52';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentSnrDetectLow';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1517';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if SNR detect is low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true if SNR detected is low
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaec3c71a3252dd6660e5bceebc0d1f988';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentSnrDetectHigh';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1528';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if SNR detect is high.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true  if SNR detect is high
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga5ce1abf8c9d53c027f6b0870efedda1b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentValidChannel';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1539';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks if the current channel is valid.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true if the current channel is valid
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaffe5cee9daf44677802a94f96d893c94';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentAfcRailIndicator';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1550';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
AFC Rail Indicator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga76e8485292878c1294e5910601f4575f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentSoftMuteIndicator';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1563';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Soft Mute Indicator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Indicates soft mute is engaged.

@return true  if soft mute indicates is engaged.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gacaafab62dd411dc9b79f9fb96e8c8832';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentStereoBlend';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1576';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the value of the amount of stereo blend in % (100 = full stereo, 0 = full mono).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t value (0 to 100)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga127fa3d2f9b7d57169bbef95703fb4c9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentPilot';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1589';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Checks the current pilot.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Indicates stereo pilot presence.

@return true if stereo pilot presence has detected
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6d521bb5c7ef7811e57c7128cb2106b3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentMultipath';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1602';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current Multipath.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Contains the current multipath metric. (0 = no multipath; 100 = full multipath)

@return uint8_t value (0 to 100)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga2b3bfeca3b545f5741b1ed70a1dba077';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentSignedFrequencyOffset';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1613';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Signed frequency offset (kHz).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gad194a5c915620c6a1b8b3d6d7ed645d9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentMultipathDetectLow';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1624';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Multipath Detect Low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true 
@return false 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga82d0865cf348deb0c9f81a2f12222fb0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentMultipathDetectHigh';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1635';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Current Multipath Detect High.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true 
@return false 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga16107a2f2e51cce5a7e2b1b303425118';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentBlendDetectInterrupt';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1646';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Current Blend Detect Interrupt.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true 
@return false 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gab26fbd99452daaf18875ff1c3c35d081';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwarePN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1662';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Firmware Part Number.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gac2f451cb7320b66d8e08698dcacd50d0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwareFWMAJOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1672';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Firmware F W M A J O R.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1ga74b68fcd5718520fc0683977dfc18fc8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwareFWMINOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1682';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Firmware F W M I N O R.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1ga58b99a8d5ec2199cb5f2105675aa7a56';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwarePATCHH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1692';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Firmware P A T C H  HIGH.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gac10b3cd3875985e2c129fea14e2bc47a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwarePATCHL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1702';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Firmware P A T C H  LOW.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gab57870d69969e73265e9cffe2a73d868';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwareCMPMAJOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1712';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Firmware C M P M A J O R object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1ga883645d266a612ce07d71fdb2cd81e5f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwareCMPMINOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1722';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP6 -  Returns the Component Major Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns the Component Minor Revision (ASCII) (RESP7)

@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gacd363d9111e4a57cf2e1167634bc1b5f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmwareCHIPREV';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1732';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP8 -  Returns the Chip Revision (ASCII)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga3b7543657dfd36da962267bb8692b796';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setVolume';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'volume';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1736';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets volume level (0  to 63)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 62, 123, 170, 173 and 204

@param uint8_t volume (domain: 0 - 63) 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1gacf79be50a01fe91abd498e5d42d83317';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getVolume';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1737';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current volume level.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see setVolume()

@return volume (domain: 0 - 63) 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga23d49ab35895b76e0898405fac086c09';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'volumeDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1738';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set sound volume level Down   
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see setVolume() 
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga11be65552224d4ad3e41d83a5ff1172b';
        sec-mem-ref-line = '1762';
        sec-mem-ref-name = 'setVolumeDown';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga5e3e8cf04ca99c6be2dbe15d72b4efa3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'volumeUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1739';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set sound volume level Up   
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see setVolume()
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1gae0e23a0a2cbc24ee16b03866ee587102';
        sec-mem-ref-line = '1755';
        sec-mem-ref-name = 'setVolumeUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga430b86ccfd4d6c89da9202a538e0cfc9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentVolume';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1747';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Current Volume.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns the current volume level.
@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1gae0e23a0a2cbc24ee16b03866ee587102';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setVolumeUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1755';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Volume Up.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Same volumeUp()
@see volumeUp
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5e3e8cf04ca99c6be2dbe15d72b4efa3';
        sec-mem-ref-line = '1890';
        sec-mem-ref-name = 'volumeUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga11be65552224d4ad3e41d83a5ff1172b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setVolumeDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1762';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Volume Down.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Same volumeDown()
@return voi 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga23d49ab35895b76e0898405fac086c09';
        sec-mem-ref-line = '1904';
        sec-mem-ref-name = 'volumeDown';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1gac6a538cefcb4beb5bd77a721f8dab019';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAudioMode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'audioMode';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1782';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Audio Mode. See table below.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
If you want to change the audio mode, call this function before call setAM(), setFM() or setSSB(). 


Sets the Si47XX device to use ANALOG or DIGITAL audio output. The table below show the valid values. 


This function will only take effect after calling setAM(), setFM() or setSSB().


<table class="markdownTable">  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Macro</th>    <th class="markdownTableHeadNone"> Value (Binary)</th>    <th class="markdownTableHeadNone"> Description</th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> SI473X_ANALOG_AUDIO</td>    <td class="markdownTableBodyNone"> 0b00000101</td>    <td class="markdownTableBodyNone"> Analog Audio Inputs</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> SI473X_DIGITAL_AUDIO1</td>    <td class="markdownTableBodyNone"> 0b00001011</td>    <td class="markdownTableBodyNone"> Digital audio output (DCLK, LOUT/DFS, ROUT/DIO)</td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> SI473X_DIGITAL_AUDIO2</td>    <td class="markdownTableBodyNone"> 0b10110000</td>    <td class="markdownTableBodyNone"> Digital audio outputs (DCLK, DFS, DIO)</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> SI473X_DIGITAL_AUDIO3</td>    <td class="markdownTableBodyNone"> 0b10110101</td>    <td class="markdownTableBodyNone"> Analog and digital audio outputs (LOUT/ROUT and DCLK, DFS,DIO)</td>  </tr>
</table>

@see setAM(), setFM(), setSSB().
@param audioMode One of the values options above
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga63302217aaa006f6683dacd410b48e40';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAmDelayNB';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1794';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the delay before applying impulse blanking.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Delay in micro-seconds before applying impulse blanking to the original samples. Default value is 172.

@param value Delay in micro-seconds
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1gaea652d358b4b586b6d5964ceb8eb7c81';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'digitalOutputFormat';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'OSIZE';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'OMONO';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'OMODE';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'OFALL';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1798';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Configures the digital audio output format.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Options: DCLK edge, data format, force mono, and sample precision.

ATTENTION: The document AN383; "Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES"; rev 0.8; page 6; there is the following note:
           Crystal and digital audio mode cannot be used at the same time. Populate R1 and remove C10, C11, and X1 when using digital audio.

@see Si47XX PROGRAMINGGUIDE; AN332 (REV 1.0); page 195.
@see Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES"; AN383; rev 0.8; page 6; 

@param uint8_t OSIZE Dgital Output Audio Sample Precision (0=16 bits, 1=20 bits, 2=24 bits, 3=8bits).
@param uint8_t OMONO Digital Output Mono Mode (0=Use mono/stereo blend ).
@param uint8_t OMODE Digital Output Mode (0=I2S, 6 = Left-justified, 8 = MSB at second DCLK after DFS pulse, 12 = MSB at first DCLK after DFS pulse).
@param uint8_t OFALL Digital Output DCLK Edge (0 = use DCLK rising edge, 1 = use DCLK falling edge)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga1a404ca11fb32b457be2d7cfe484dd03';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'digitalOutputSampleRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'DOSR';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1799';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enables digital audio output and configures digital audio output sample rate in samples per second (sps).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
ATTENTION: The document AN383; "Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES"; rev 0.8; page 6; there is the following note:
           Crystal and digital audio mode cannot be used at the same time. Populate R1 and remove C10, C11, and X1 when using digital audio.

@see Si47XX PROGRAMINGGUIDE; AN332 (REV 1.0); page 196. 
@see Si47XX ANTENNA, SCHEMATIC, LAYOUT, AND DESIGN GUIDELINES; AN383; rev 0.8; page 6

@param uint16_t DOSR Diital Output Sample Rate(32â48 ksps .0 to disable digital audio output).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group13_1ga12d4e173d096b1568e4209a63534d4f6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAudioMute';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'off';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1801';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the audio on or off.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Useful to mute the audio output of the SI47XX device. This function does not work to reduce the pop in the speaker at start the system up.


If you want to remove the loud click or pop in the speaker at start, power down and power up commands, use setHardwareAudioMute with a external mute circuit. 

@see See Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 62, 123, 171 
@see setHardwareAudioMute

@param value if true, mute the audio; if false unmute the audio.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga753390952a1f2c2a98343979f1f3daa0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1803';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the radio to AM function. It means: LW MW and SW.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 1.



Define the band range you want to use for the AM mode. 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 129.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa554b3390fb6c5a4d6661b96afae73ae';
        sec-mem-ref-line = '454';
        sec-mem-ref-name = 'powerDown';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '404';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga43c5ea36995a3897820e0170d94c81f4';
        sec-mem-ref-line = '815';
        sec-mem-ref-name = 'setAM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gacd89e7b8adefcbc4e89f802acb915906';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1804';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the radio to FM function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 2.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 64. 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae4683e9a9fc7a633305b18dae54fbd83';
        sec-mem-ref-line = '1773';
        sec-mem-ref-name = 'disableFmDebug';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa554b3390fb6c5a4d6661b96afae73ae';
        sec-mem-ref-line = '454';
        sec-mem-ref-name = 'powerDown';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '404';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga673bc4b17d564bb6e7f3e9a61d35fbb3';
        sec-mem-ref-line = '853';
        sec-mem-ref-name = 'setFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga43c5ea36995a3897820e0170d94c81f4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAM';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'fromFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'toFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'intialFreq';
        sec-mem-param-defname = 'initialFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'step';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1805';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the radio to AM (LW/MW/SW) function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The example below sets the band from 550kHz to 1750kHz on AM mode. The band will start on 810kHz and step is 10kHz. 

@code 
si4735.setAM(520, 1750, 810, 10); 
@endcode

@see setFM()
@see setSSB()

@param fromFreq minimum frequency for the band
@param toFreq maximum frequency for the band
@param initialFreq initial frequency 
@param step step used to go to the next channel
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga753390952a1f2c2a98343979f1f3daa0';
        sec-mem-ref-line = '760';
        sec-mem-ref-name = 'setAM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga673bc4b17d564bb6e7f3e9a61d35fbb3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFM';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'fromFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'toFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'initialFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'step';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1806';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the radio to FM function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Defines the band range you want to use for the FM mode. 



The example below sets the band from 64MHz to 108MHzkHz on FM mode. The band will start on 103.9MHz and step is 100kHz.
On FM mode, the step 10 means 100kHz. If you want a 1MHz step, use 100.     
<br>

@code 
si4735.setFM(6400, 10800, 10390, 10);
@endcode

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 70
@see setFM()
@see setFrequencyStep()

@param fromFreq minimum frequency for the band
@param toFreq maximum frequency for the band
@param initialFreq initial frequency (default frequency)
@param step step used to go to the next channel   
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gacd89e7b8adefcbc4e89f802acb915906';
        sec-mem-ref-line = '785';
        sec-mem-ref-name = 'setFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga305b3c87d5151d3fede17d725c04d95a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFMDeEmphasis';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1815';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the FM Receive de-emphasis to 50 or 75 Î¼s.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
valid parameters are 1 = 50 Î¼s. Usedin Europe, Australia, Japan; 2 = 75 Î¼s. Used in USA (default)

@param parameter 1 or 2 (default 1 - USA)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gac5459a1eaf33567d2990e15f314f0ce0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmSoftMuteMaxAttenuation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'smattn';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1831';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Fm Soft Mute Max Attenuation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function can be useful to disable Soft Mute on FM mode. The value 0 disable soft mute.


Specified in units of dB. Default maximum attenuation is 8 dB. It works for AM and SSB.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 97. 

@param smattn Maximum attenuation to apply when in soft mute
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a2cf6f7649225c8233904ddce0c003245';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlankThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1841';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Fm Noise Blank Threshold.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets the threshold for detecting impulses in dB above the noise floor. The CTS bit (and optional interrupt) is set when it is safe to send the next command.
@param parameter (from 0 to 90. default is 10)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1acdbbbd538024585f3feb71f729ed89c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlank';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_rate';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
64
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_interval';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
55
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_irr_filter';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
300
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1858';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Fm Noise Blank.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets Noise blanking rate in 100 Hz units


Sets the Interval in micro-seconds that original samples are replaced by sample-hold clean samples.


Sets the bandwidth of the noise floor estimator.



ATTENTION: It works on SI474X. It may not work on SI473X devices. 

@param nb_rate Noise blanking rate in 100 Hz units. Default value is 64.
@param nb_interval Interval in micro-seconds that original samples are replaced by interpolated clean samples. Default value is 55 Î¼s.
@param nb_irr_filter Sets the bandwidth of the noise floor estimator. Default value is 300.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a08ece9c3ffa2b1fe116eb2cf92ecc77c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlankInterval';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1870';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Fm Noise Blank Interval.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Interval in micro-seconds that original samples are replaced by interpolated clean samples.
@param parameter ( from 8 to 48. default value is 24)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a5eb6db8b26000b6698ee2bee179d8738';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlankRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1881';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Fm Noise Blank Rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Noise blanking rate in 100 Hz units.

@param parameter ( from 1 to 64. default value is 64)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a850c0499b315196b8b141317d02c984c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlankDelay';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1891';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Fm Noise Blank Delay.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Delay in micro-seconds before applying impulse blanking to the original samples.
@param parameter ( from 125 to 219. default value is 170)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a8dbb2b88feefc4051be02ed7988f6f3a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmNoiseBlank_IIR_Filter';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1901';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the FmNoiseBlank IIR Filter.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets the bandwidth of the noise floor estimator.
@param parameter (from 300 to 1600. default value is 300)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6451f3fdb5dc6cc11b99d9258da3ff25';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMDeEmphasis';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1913';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AM Receive de-emphasis to 50 or disable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
valid parameters are 1 = 50 Î¼s. Usedin urope, Australia, Japan; 2 = 75 Î¼s. Used in USA (default)

@param parameter 1 = enable or 0 = disable
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga1868c4cdd8a5fa9e846cd637f97f082e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMSoftMuteSlop';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1929';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AM attenuation slope during soft mute.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Configures attenuation slope during soft mute in dB attenuation per dB SNR below the soft mute SNR threshold.


Soft mute attenuation is the minimum of SMSLOPEx(SMTHRâSNR) and SMATTN.


The default slope is 1 dB/dB for AMRX component 5.0 or later and 2 dB/dB for AMRX component 3.0 or earlier.

@see setAmSoftMuteMaxAttenuation
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); 
@param parameter  the valid values are 1â5 (default 1).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga48f023f4073dcaad41bfa4ef3cee7a4f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMSoftMuteRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1944';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the attack and decay rates when entering or leaving soft mute.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The value specified is multiplied by 4.35 dB/s to come up with the actual attack rate


The default rate is 278 dB/s.
@see setAmSoftMuteMaxAttenuation
@see Si47XX PRORAMMING GUIDE; AN332 (REV 1.0); 
@param parameter  The valid values are 1-255  ( Default is ~64 - [64 x 4.35 = 278] )
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga64928266b152a979104491398a6058d4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMSoftMuteSnrThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1959';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SNR threshold to engage soft mute.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Whenever the SNR for a tuned frequency drops below this threshold the AM reception will go in soft mute,


provided soft mute max attenuation property is non-zero. The default value is 8dB
@see setAmSoftMuteMxAttenuation
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.0); 
@param parameter  0-63 (default is 8)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga39c2f0b6a140fe46638b950faba5afaa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMSoftMuteReleaseRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1972';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the soft mute release rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Smaller values provide slower release and larger values provide faster release. The default is 8192 (approximately 8000 dB/s).
@see setAmSoftMuteMxAttenuation
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.0); 
@param parameter  1â32767 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaa4d5fa1c73073d5cfc47838d6b832ba5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMSoftMuteAttackRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1985';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the soft mute attack rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Smaller values provide slower attack and larger values provide faster attack. 
@see setAmSoftMuteMxAttenuation
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.0); 
@param parameter  1â32767 (The default is 8192 (approximately 8000 dB/s)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga726d1ce5273fe294e8896f841d6e6ba0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAmAgcAttackRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1998';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AGC attack rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Large values provide slower attack, and smaller values provide faster attack.. 
@see setAmAgcAttackRate
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.2); page 167 
@param parameter Range: 4â248 (The default is 0x04) 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gab86a3d99cff06dc0c5a0f0d6db9ede7b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAmAgcReleaseRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2011';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AGC release rate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Larger values provide slower release, and smaller values provide faster release.
@see setAmAgcReleaseRate
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.2); page 168 
@param parameter Range: 4â248 (The default is 0x8C) 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga211bb7fb7b339e005e8a0ae2e2813b79';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbAgcAttackRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2024';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AGC attack rate on SSB mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Large values provide slower attack, and smaller values provide faster attack.. 
@see setSsbAgcAttackRate
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 29 
@param parameter Range: 4â248 (The default is 0x04) 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga65ae2ed5be90932da9b26073f87a8bda';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSsbAgcReleaseRate';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2037';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the AGC Release rate on SSB mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Larger values provide slower release, and smaller values provide faster release. 
@see setSsbAgcAttackRate
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 29 
@param parameter Range: 4â248 (The default is 0x18)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga46d1dae32aae4da7ad9fabfdb36440cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAMFrontEndAgcControl';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'MIN_GAIN_INDEX';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ATTN_BACKUP';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2056';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Adjusts the AM AGC for external front-end attenuator and external front-end cascode LNA.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This property contains two fields: MIN_GAIN_INDEX and ATTN_BACKUP.


MIN_GAIN_INDEX impacts sensitivity and U/D performance. Lower values improve sensitivity, but degrade 


far away blocker U/D performance. 


Higher values degrade sensitivity, but improve U/D. With MIN_GAIN_INDEX=19 and Si4743 EVB reference 


design, the Si474x provides sensitivity of 28dBuV typical and U/D exceeding 55dB on far away blockers.


With MIN_GAIN_INDEX=24, the Si474x provides sensitivity of 34dBuV typical and U/D approaching 70dB on 


far away blockers. 
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.0); page 168
@param MIN_GAIN_INDEX Values below 19 have minimal sensitivity improvement; Higher values degrade sensitivity, but improve U/D.
@param ATTN_BACKUP ??? 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a20b9ef7d2f0fba55eaf20f48781846b5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAmNoiseBlank';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_rate';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
64
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_interval';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
55
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'nb_irr_filter';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
300
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2080';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Am Noise Blank.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets Noise blanking rate in 100 Hz units


Sets the Interval in micro-seconds that original samples are replaced by sample-hold clean samples.


Sets the bandwidth of the noise floor estimator.



ATTENTION: It works on SI474X. It may not work on SI473X devices. 

@param nb_rate Noise blanking rate in 100 Hz units. Default value is 64.
@param nb_interval Interval in micro-seconds that original samples are replaced by interpolated clean samples. Default value is 55 Î¼s.
@param nb_irr_filter Sets the bandwidth of the noise floor estimator. Default value is 300.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1ae7ca2ffa6ad68ca69e4f35a3c40bbc3c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isCurrentTuneFM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2092';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga4714f08989f020110620781ae968b01b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isCurrentTuneAM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2104';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if the current function is AM (AM_TUNE_FREQ).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true if the current function is AM (AM_TUNE_FREQ).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6913873c511adb357fa7c02f2a8386d7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'isCurrentTuneSSB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2116';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns true if the current function is SSB (SSB_TUNE_FREQ).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return true if the current function is SSB (SSB_TUNE_FREQ).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga8755743a36d2d4662c8db918d02ee4e1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setBandwidth';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AMCHFLT';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AMPLFLT';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2121';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Selects the bandwidth of the channel filter for AM reception.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The choices are 6, 4, 3, 2, 2.5, 1.8, or 1 (kHz). The default bandwidth is 2 kHz. It works only in AM / SSB (LW/MW/SW) 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 125, 151, 277, 181.

@param AMCHFLT the choices are:   0 = 6 kHz Bandwidth                    
<br>
                                  1 = 4 kHz Bandwidth
                                  2 = 3 kHz Bandwidth
                                  3 = 2 kHz Bandwidth
                                  4 = 1 kHz Bandwidth
                                  5 = 1.8 kHz Bandwidth
                                  6 = 2.5 kHz Bandwidth, gradual roll off
                                  7â15 = Reserved (Do not use).
@param AMPLFLT Enables the AM Power Line Noise Rejection Filter.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1af28a854a8997ba7a195b6365b20fda95';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBandwidth';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'filter_value';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2136';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Bandwith on FM mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Selects bandwidth of channel filter applied at the demodulation stage. Default is automatic which means the device automatically selects proper channel filter. <BR>


| Filter  | Description |


| ----&mdash; | ----------&mdash;|


|    0    | Automatically select proper channel filter (Default) |


|    1    | Force wide (110 kHz) channel filter |


|    2    | Force narrow (84 kHz) channel filter |


|    3    | Force narrower (60 kHz) channel filter |


|    4    | Force narrowest (40 kHz) channel filter |

@param filter_value 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga7bb16741b03d8f1fb14348dce14c1a6b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getTuneFrequecyFast';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2147';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the FAST tuning status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@retrn uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga51d816112d974f10306d9d001667395a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setTuneFrequencyFast';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'FAST';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2158';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the FAST Tuning.  
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
If set, excutes fast and invalidated tune. Theune status will not be accurate

@param FAST 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga96d83cfe35e5fb5db4719d604871e8cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getTuneFrequecyFreeze';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2168';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the FREEZE status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return unt8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6a322615f2d80290ce9f5b2297c36af3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setTuneFrequencyFreze';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'FREEZE';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2179';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets Freeze Metrics During Alternate Frequency Jum.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Only on FM mode

@param FREEZE 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaaceadaaf0835e3db124d1b36f2aebd3c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setTuneFrequencyAntennaCapacitor';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'capacitor';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2184';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Selects the tuning capacitor value.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
On FM mode, the Antenna Tuning Capacitor is valid only when using TXO/LPI pin as the antenna input.
This selects the value of the antenna tuning capacitor manually, or automatically if set to zero. 
The valid range is 0 to 191. Automatic capacitor tuning is recommended. 
For example, if the varactor is set to a value of 5 manually, when read back the value will be 1. 


on AM mode, If the value is set to anything other than 0, the tuning capacitance is manually set as 95 fF x ANTCAP + 7 pF. 
ANTCAP manual range is 1â6143. Automatic capacitor tuning is recommended. In SW mode, ANTCAPH[15:8] (high byte) needs to be set to 0 and ANTCAPL[7:0] (low byte) needs to be set to 1. 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 71 and 136

@param capacitor If zero, the tuning capacitor value is selected automatically. 
                 If the value is set to anything other than 0:
                 AM - the tuning capacitance is manually set as 95 fF x ANTCAP + 7 pF. 
                      ANTCAP manual range is 1â6143;
                 FM - the valid range is 0 to 191.    
<br>
                 According to Silicon Labs, automatic capacitor tuning is recommended (value 0). 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gac0fcfd64dcf30b11d4dc219d9f7fc5d9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'frequencyUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2186';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Increments the current frequency on current band/function by using the current step.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see setFrequencyStep()
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga7940c833a294a018e4f5a7c7b7d8443d';
        sec-mem-ref-line = '2195';
        sec-mem-ref-name = 'setFrequencyUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga93fff524a6f900ac91eb1222ce73f9ba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'frequencyDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2187';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Decrements the current frequency on current band/function by using the current step.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see setFrequencyStep()
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga9da28931ba73cad3e27be4bb610c5ddf';
        sec-mem-ref-line = '2203';
        sec-mem-ref-name = 'setFrequencyDown';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga7940c833a294a018e4f5a7c7b7d8443d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2195';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the FrequencyUp.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Same frequencyUp
@see frequencyUp
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac0fcfd64dcf30b11d4dc219d9f7fc5d9';
        sec-mem-ref-line = '721';
        sec-mem-ref-name = 'frequencyUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga9da28931ba73cad3e27be4bb610c5ddf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2203';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Frequency Down.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
same frequencyDown
@see frequencyDown
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga93fff524a6f900ac91eb1222ce73f9ba';
        sec-mem-ref-line = '738';
        sec-mem-ref-name = 'frequencyDown';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group07_1ga2fbc7e2187a7c645879623100dbc8502';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getFirmware';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2205';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets firmware information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The firmware information will be stored in firmwareInfo member variable 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 66, 131
@see firmwareInfo
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf8d0ff88ec989d714ab63da39f3897b4';
        sec-mem-ref-line = '574';
        sec-mem-ref-name = 'setup';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga3280b98b8331f00b4d0158ef1b076533';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekStation';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SEEKUP';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'WRAP';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2207';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Look for a station (Automatic tune)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Starts a seek process for a channel that meets the RSSI and SNR criteria for AM.  
<br>


<strong>This function does not work on SSB mode</strong>.  
<br>
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 55, 72, 125 and 137

@param SEEKUP Seek Up/Down. Determines the direction of the search, either UP = 1, or DOWN = 0. 
@param Wrap/Halt. Determines whether the seek should Wrap = 1, or Halt = 0 when it hits the band limit.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaed67e2cee4e20551f3d522eea45fb7f5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setMaxSeekTime';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'time_in_ms';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2219';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the maximum time in milliseconds for seeking. The default value is 8000ms (8s).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Depending on the bandwidth, your reception conditions or step configuration, the seek process can take a long time.


This function sets a time limit for seeking process and back the control to the system if the time runs out.

@addindex Seek

@param time_in_ms time in milliseconds. 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ad656f75a444c174797f6e7a8bf6e6ee2';
        sec-mem-ref-line = '1073';
        sec-mem-ref-name = 'maxSeekTime';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaad5211e3fff28141473442f59008e415';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekStationUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2232';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Search for the next station.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Seek a station up. Stop when a station is found or the frequency has reached the upper limit  
<br>
@see seekStation, seekStationProgress, setSeekAmLimits setSeekFmLimits 
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 124, 137, 139, 278
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga1eeaa09670cdbdc7ddd724c940d2506b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekStationDown';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2245';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Search the previous station.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Seek a station Down. Stop when a station is found or the frequency has reached the lower limit  
<br>
@see seekStation, seekStationProgress, setSeekAmLimits, setSeekFmLimits
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 124, 137, 139, 278 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gab91e6e91f8273104ff970e9a808c4d2f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekNextStation';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2250';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Search for the next station.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Like seekStationUp this function goes to a next station.  
<br>


The main difference is the method used to look for a station.

@see seekStation, seekStationUp, seekStationDown, seekPreviousStation, seekStationProgress
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gad32c990d0c9184bb405f11560c4dae7e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekPreviousStation';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2251';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Search the previous station.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Like seekStationDown this function goes to a previous station.  
<br>


The main difference is the method used to look for a station.
@see seekStation, seekStationUp, seekStationDown, seekPreviousStation, seekStationProgress
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga80b69a4edfacf274a8a8033e860453ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekStationProgress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void(*)(uint16_t f)
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'showFunc';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'up_down';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2253';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seeks a station up or down.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Seek up or down a station and call a function defined by the developer to show the frequency. 


The first parameter of this function is a name of your function that you have to implement to show the current frequency. 


If you do not want to show the seeking progress,  you can set NULL instead the name of the function.   
<br>


The code below shows an example using ta function the shows the current frequency on he Serial Monitor. You might want to implement a function that shows the frequency on your display device. 


Also, you have to declare the frequency parameter that will be used by the function to show the frequency value. 


<strong>This function does not work on SSB mode</strong>. 
@code 
void showFrequency( uint16_t freq ) {
   Serial.print(freq); 
   Serial.println("MHz ");
}

void loop() {

 receiver.seekStationProgress(showFrequency,1); // Seek Up
 .
 .
 .
 receiver.seekStationProgress(showFrequency,0); // Seek Down

}
@endcode

@see seekStation, seekStationUp, seekStationDown, getStatus, setMaxSeekTime   
<br>
@param showFunc  function that you have to implement to show the frequency during the seeking process. Set NULL if you do not want to show the progress. 
@param up_down   set up_down = 1 for seeking station up; set up_down = 0 for seeking station down
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga38f7c7610e05fc67bef6fbb4791e1728';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'seekStationProgress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void(*)(uint16_t f)
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'showFunc';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool(*)()
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'stopSeking';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'up_down';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2254';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seeks a station up or down.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Seek up or down a station and call a function defined by the developer to show the frequency and stop seeking process by the user. 


The first parameter of this function is a name of your function that you have to implement to show the current frequency. 


The second parameter is the name function that will check stop seeking action. Thus function should return true or false and should read a button, encoder or some status to make decision to stop or keep seeking. 


If you do not want to show the seeking progress,  you can set NULL instead the name of the function. 


If you do not want stop seeking checking, you can set NULL instead the name of a function.    
<br>


The code below shows an example using ta function the shows the current frequency on he Serial Monitor. You might want to implement a function that shows the frequency on your display device. 


Also, you have to declare the frequency parameter that will be used by the function to show the frequency value. 


<strong>This function does not work on SSB mode</strong>. 
@code 
void showFrequency( uint16_t freq ) {
   Serial.print(freq); 
   Serial.println("MHz ");
}

void loop() {

 receiver.seekStationProgress(showFrequency, checkStopSeeking, 1); // Seek Up
 .
 .
 .
 receiver.seekStationProgress(showFrequency, checkStopSeeking, 0); // Seek Down

}
@endcode

@see seekStation, seekStationUp, seekStationDown, getStatus, setMaxSeekTime   
<br>
@param showFunc  function that you have to implement to show the frequency during the seeking process. Set NULL if you do not want to show the progress. 
@param stopSeeking functionthat you have to implement if you want to control the stop seeking action. 
@param up_down   set up_down = 1 for seeking station up; set up_down = 0 for seeking station down
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6b901d5cd729364dbda6e5b811dc9ec2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekAmLimits';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'bottom';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'top';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2257';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the bottom frequency and top frequency of the AM band for seek. Default is 520 to 1710.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 127, 161, and 162

@param uint16_t bottom - the bottom of the AM (MW/SW) mode for seek
@param uint16_t    top - the top of the AM (MW/SW) mode for seek
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6f8218c0bbdcb75ea54bc8af2a60dcc6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekAmSpacing';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'spacing';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2258';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Selects frequency spacingfor AM seek. Default is 10 kHz spacing.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 163, 229 and 283

@param uint16_t spacing - step in kHz
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga8107cc84409dcdad0c931368734ece3e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekAmSrnThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2259';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SNR threshold for a valid AM Seek/Tune.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
If the value is zero then SNR threshold is not considered when doing a seek. Default value is 5 dB.


please, call setSeekAmSNRThreshold instead setSeekAmSrnThreshold
@see Si47XX PROGRAMMING GUIDE;  (REV 1.0); page 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a82f15d07f6c9d1ae963b66f57e0f43f9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekAmSNRThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2260';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gae206ce900e59c6e5ff3ad5ea8cb72a12';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekAmRssiThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2262';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the RSSI threshold for a valid AM Seek/Tune.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
If the value is zero then RSSI threshold is not considered when doing a seek. Default value is 25 dBÎ¼V.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1gaf66b9851297e6884d70a7e40dd1367c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekFmLimits';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'bottom';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'top';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2265';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the bottom frequency and top frequency of the FM band for seek. Default is 8750 to 10790.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 100 and  101

@param uint16_t bottom - the bottom of the FM(VHF) mode for seek
@param uint16_t    top - the top of the FM(VHF) mode for seek
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga6269e74b72ec1a1c3630b2800bad66b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekFmSpacing';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'spacing';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2266';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Selects frequency spacingfor FM seek. Default is 100 kHz (value 10) spacing. There are only 3 valid values: 5, 10, and 20.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Although the guide does not mention it, the value 1 (10 kHz) seems to work better 
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 101

@param uint16_t spacing - step in kHz
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga4ed12cebaf51a7379fc06623991b2d51';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekFmSrnThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2267';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SNR threshold for a valid FM Seek/Tune.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
SNR Threshold which determines if a valid channel has been found during Seek/Tune. Specified in units of dB in 1 dB steps (0â127). Default is 3 dB


please, call setSeekFmSNRThreshold instead setSeekFmSrnThreshold
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 102

@param value between 0 and 127.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a8fe968baf9aac540e2d234141b564650';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekFmSNRThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2268';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga97c3887e96fe32426e974c0b2cb33bad';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSeekFmRssiThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2269';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the RSSI threshold for a valid FM Seek/Tune.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
RSSI threshold which determines if a valid channel has been found during seek/tune. Specified in units of dBÎ¼V in 1 dBÎ¼V steps (0â127). Default is 20 dBÎ¼V.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 102
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gac598865516ca09db7dbfa6a84da7f179';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendStereoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2271';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RSSI threshold for stereo blend (Full stereo above threshold, blend below threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
To force stereo, set this to 0. To force mono, set this to 127.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 90. 

@param parameter  valid values: 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gadf4c5ec4473fd8486dd2ec7a19a10d24';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendMonoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2272';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RSSI threshold for mono blend (Full mono below threshold, blend above threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
To force stereo set this to 0. To force mono set this to 127. Default value is 30 dBÎ¼V.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 56.

@param parameter valid values: 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gab063630466dccea3becc11d60d122904';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendRssiStereoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2273';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RSSI threshold for stereo blend. (Full stereo above threshold, blend below threshold.)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
To force stereo, set this to 0. To force mono, set this to 127. Default value is 49 dBÎ¼V.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 59. 

@param parameter valid values: 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1ga1b134a94138b3bf993a5d3eb5f8ed5c6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBLendRssiMonoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2274';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RSSI threshold for mono blend (Full mono below threshold, blend above threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
To force stereo, set this to 0. To force mono, set this to 127. Default value is 30 dBÎ¼V.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 59.  
<br>

@param parameter valid values: 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1ga1d1a5eed976370d99827ba55d08b9293';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendSnrStereoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2275';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets SNR threshold for stereo blend (Full stereo above threshold, blend below threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
To force stereo, set this to 0. To force mono, set this to 127. Default value is 27 dB.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 59.  
<br>

@param parameter valid values: 0 to 127
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gae2c30536e59f6691d990a2b9cf21f07e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBLendSnrMonoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2276';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets SNR threshold for mono blend (Full mono below threshold, blend above threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
To force stereo, set this to 0. To force mono, set this to 127. Default value is 14 dB.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 59. 

@param parameter valid values: 0 to 127 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1ga0ed776a193fb2fcff783d4a82ff714e5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendMultiPathStereoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2277';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets multipath threshold for stereo blend (Full stereo below threshold, blend above threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
To force stereo, set this to 100. To force mono, set this to 0. Default value is 20.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 60.

@param parameter valid values: 0 to 100 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gacc9fd27b38f49f167facfcc4f6216c5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmBlendMultiPathMonoThreshold';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2278';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets Multipath threshold for mono blend (Full mono above threshold, blend below threshold).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
To force stereo, set to 100. To force mono, set to 0. The default is 60.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 60.

@param parameter valid values: 0 to 100 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1ga52c7b7b1f0ed9121b0e64516b2bd2a55';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmStereoOn';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2279';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Turn Off Stereo operation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 4.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1ga59ce1008944ff9a51b6c5baeb3a3e2cb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFmStereoOff';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2280';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Turn Off Stereo operation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 3.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaffdba9ca9fb9bf5bb671ac3d448a7e89';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RdsInit';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2282';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Starts the control member variables for RDS.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
RDS implementation 
   
 


This method is called by setRdsConfig()

@see setRdsConfig()
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadede134b96fd5650b87673ce413babb2';
        sec-mem-ref-line = '1968';
        sec-mem-ref-name = 'clearRdsBuffer0A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac65c552004f5e5e646638e37a5a68213';
        sec-mem-ref-line = '1943';
        sec-mem-ref-name = 'clearRdsBuffer2A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaed0988165057aa2880f41b88ac236cd7';
        sec-mem-ref-line = '1956';
        sec-mem-ref-name = 'clearRdsBuffer2B';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gad9718a85c79a311c26997bbda20f2351';
        sec-mem-ref-line = '2009';
        sec-mem-ref-name = 'setRdsConfig';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaddfe8c89101b4859eca31ad68ad9de2e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRdsIntSource';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSRECV';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSSYNCLOST';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSSYNCFOUND';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSNEWBLOCKA';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSNEWBLOCKB';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2283';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Configures interrupt related to RDS.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Use this method if want to use interrupt

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 103

@param RDSRECV If set, generate RDSINT when RDS FIFO has at least FM_RDS_INT_FIFO_COUNT entries.
@param RDSSYNCLOST If set, generate RDSINT when RDS loses synchronization.
@param RDSSYNCFOUND set, generate RDSINT when RDS gains synchronization.
@param RDSNEWBLOCKA If set, generate an interrupt when Block A data is found or subsequently changed
@param RDSNEWBLOCKB If set, generate an interrupt when Block B data is found or subsequently changed
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga350a2033671a7620d4b9290a2347e185';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsStatus';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'INTACK';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'MTFIFO';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'STATUSONLY';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2284';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the RDS status. Store the status in currentRdsStatus member. RDS COMMAND FM_RDS_STATUS.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 55 and 77

@param INTACK Interrupt Acknowledge; 0 = RDSINT status preserved. 1 = Clears RDSINT.
@param MTFIFO 0 = If FIFO not empty, read and remove oldest FIFO entry; 1 = Clear RDS Receive FIFO.
@param STATUSONLY Determines if data should be removed from the RDS FIFO.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadede134b96fd5650b87673ce413babb2';
        sec-mem-ref-line = '1968';
        sec-mem-ref-name = 'clearRdsBuffer0A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac65c552004f5e5e646638e37a5a68213';
        sec-mem-ref-line = '1943';
        sec-mem-ref-name = 'clearRdsBuffer2A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaed0988165057aa2880f41b88ac236cd7';
        sec-mem-ref-line = '1956';
        sec-mem-ref-name = 'clearRdsBuffer2B';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga6e8405ea5846fab586080a7be696178e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsReceived';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2292';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds Received FIFO.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
if FIFO is 1, it means the minimum number of groups was filled
@return true if minimum number of groups was filled.
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf1e67b201799a9e8d7208a32a65656b5';
        sec-mem-ref-line = '2148';
        sec-mem-ref-name = 'getRdsPI';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga12d917629b78fffebac5ecf8f2936921';
        sec-mem-ref-line = '2350';
        sec-mem-ref-name = 'getRdsText0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae54d0f5562ca7615c3b90bee00c29ab4';
        sec-mem-ref-line = '2383';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gac283a8a89cc885c2740c65a7128ff7ef';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsSyncLost';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2303';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds Sync Lost object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
returns true (1) if Lost RDS synchronization is detected. 
@return true if Lost RDS synchronization detected. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga78e906f12771490771c624be1777784d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsSyncFound';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2314';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds Sync Found.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
return true if found RDS synchronization
@return true if found RDS synchronization
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga561a052a8c737302368274c774d8c129';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsNewBlockA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2326';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds New Block A.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns true if valid Block A data has been received.
@return true or false
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf1e67b201799a9e8d7208a32a65656b5';
        sec-mem-ref-line = '2148';
        sec-mem-ref-name = 'getRdsPI';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaff740d85cc04c257f53c7e910bd45fcf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsNewBlockB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2337';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds New Block B.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns true if valid Block B data has been received.
@return true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga6e899b37cbc3dcd0ab969724e4008f0f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsSync';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2348';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Rds Sync.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns true if RDS currently synchronized.
@return true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga8db437efc42a81466d8daf4dcc35c50c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getGroupLost';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2359';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Group Lost.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns true if one or more RDS groups discarded due to FIFO overrun.
@return true or false
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga819c370ff03c52a527fbc85f9877f526';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getNumRdsFifoUsed';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2370';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the Num Rds Fifo Used.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Return the number of RDS FIFO used
@return uint8_t Total RDS FIFO used
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gad1c4f5e8f21d008361c8613c94eca0c0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFifoCount';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2381';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the minimum number of RDS groups stored in the RDS FIFO before RDSRECV is set.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Return the number of RDS FIFO used
@param value from 0 to 25. Default value is 0. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gadbc1132450ca79ed53e8e8cc0d2fe1d1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getEndIndicatorGroupA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2392';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Check if 0xD or 0xA special characters were received for group A.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see resetEndIndicatorGroupA
@return true or false
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a4b777d713357d2595e8617a63a32adbe';
        sec-mem-ref-line = '1065';
        sec-mem-ref-name = 'rdsEndGroupA';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga339af59bbaefd8d60ba9b26e742bc01e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resetEndIndicatorGroupA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2401';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Resets 0xD or 0xA special characters condition (makes it false)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see getEndIndicatorGroupA
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a4b777d713357d2595e8617a63a32adbe';
        sec-mem-ref-line = '1065';
        sec-mem-ref-name = 'rdsEndGroupA';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga1cd6e6388fbb853cc24d3e0dc0df1eb6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getEndIndicatorGroupB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2411';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Check if 0xD or 0xA special characters were received for group B.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see resetEndIndicatorGroupB
@return true or false
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a07ac2f7392dceae88cf87cf34d9960d1';
        sec-mem-ref-line = '1066';
        sec-mem-ref-name = 'rdsEndGroupB';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga11a5d5eb070466b488e5adec650e625e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resetEndIndicatorGroupB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2421';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Resets 0xD or 0xA special characters condition (makes it false)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see getEndIndicatorGroupB
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a07ac2f7392dceae88cf87cf34d9960d1';
        sec-mem-ref-line = '1066';
        sec-mem-ref-name = 'rdsEndGroupB';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga94cce3834f85fc127e8c2dab3a03e875';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2437';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets RDS Status.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Same result of calling getRdsStatus(0,0,0).


Please, call getRdsStatus(uint8_t INTACK, uint8_t MTFIFO, uint8_t STATUSONLY) instead getRdsStatus() 
if you want other behaviour. 

@see SI4735::getRdsStatus(uint8_t INTACK, uint8_t MTFIFO, uint8_t STATUSONLY)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga13cd4540eff45acbc4252875edda75ed';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsClearFifo';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2448';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Empty FIFO.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Clear RDS Receive FIFO.
@see getRdsStatus
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga358ae7318679b5a47b04d1f672bf3257';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsClearInterrupt';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2459';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clears RDSINT.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
INTACK Interrupt Acknowledge; 0 = RDSINT status preserved. 1 = Clears RDSINT.
@see getRdsStatus
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gad9718a85c79a311c26997bbda20f2351';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRdsConfig';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'RDSEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'BLETHA';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'BLETHB';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'BLETHC';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'BLETHD';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2464';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets RDS property.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Configures RDS settings to enable RDS processing (RDSEN) and set RDS block error thresholds. 


When a RDS Group is received, all block errors must be less than or equal the associated block 
error threshold for the group to be stored in the RDS FIFO. 


IMPORTANT: 
All block errors must be less than or equal the associated block error threshold 
for the group to be stored in the RDS FIFO. 
<table class="markdownTable">  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Value</th>    <th class="markdownTableHeadNone"> Description</th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0</td>    <td class="markdownTableBodyNone"> No errors</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 1</td>    <td class="markdownTableBodyNone"> 1â2 bit errors detected and corrected</td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 2</td>    <td class="markdownTableBodyNone"> 3â5 bit errors detected and corrected</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 3</td>    <td class="markdownTableBodyNone"> Uncorrectable</td>  </tr>
</table>



Recommended Block Error Threshold options:
<table class="markdownTable">  <tr class="markdownTableHead">    <th class="markdownTableHeadNone"> Exemples</th>    <th class="markdownTableHeadNone"> Description</th>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 2,2,2,2</td>    <td class="markdownTableBodyNone"> No group stored if any errors are uncorrected</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 3,3,3,3</td>    <td class="markdownTableBodyNone"> Group stored regardless of errors</td>  </tr>
<tr class="markdownTableRowOdd">    <td class="markdownTableBodyNone"> 0,0,0,0</td>    <td class="markdownTableBodyNone"> No group stored containing corrected or uncorrected errors</td>  </tr>
<tr class="markdownTableRowEven">    <td class="markdownTableBodyNone"> 3,2,3,3</td>    <td class="markdownTableBodyNone"> Group stored with corrected errors on B, regardless of errors on A, C, or D</td>  </tr>
</table>

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 104

@param uint8_t RDSEN RDS Processing Enable; 1 = RDS processing enabled.
@param uint8_t BLETHA Block Error Threshold BLOCKA.   
<br>
@param uint8_t BLETHB Block Error Threshold BLOCKB.  
<br>
@param uint8_t BLETHC Block Error Threshold BLOCKC.  
<br>
@param uint8_t BLETHD Block Error Threshold BLOCKD. 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaffdba9ca9fb9bf5bb671ac3d448a7e89';
        sec-mem-ref-line = '1929';
        sec-mem-ref-name = 'RdsInit';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaf1e67b201799a9e8d7208a32a65656b5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsPI';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2465';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the programa type.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Read the Block A content

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 77 and 78

@return BLOCKAL
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga561a052a8c737302368274c774d8c129';
        sec-mem-ref-line = '2326';
        sec-mem-ref-name = 'getRdsNewBlockA';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga6e8405ea5846fab586080a7be696178e';
        sec-mem-ref-line = '2292';
        sec-mem-ref-name = 'getRdsReceived';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaa35366e5cded7b864f7268a7e4a8dbe9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsGroupType';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2466';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Group Type (extracted from the Block B)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return BLOCKBL 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga05f76a0a0ebda813483f1df24e890904';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsFlagAB';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2467';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the current Text Flag A/B  
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t current Text Flag A/B  
<br>
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaf9b6cb614d1b01b11bb23c19e6deb8b9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsVersionCode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2468';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the version code (extracted from the Block B)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@returns  0=A or 1=B
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gac28fa3818d4f900c4f4ba6be10c1405b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsProgramType';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2469';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the Program Type (extracted from the Block B)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see https://en.wikipedia.org/wiki/Radio_Data_System

@return program type (an integer betwenn 0 and 31)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gab1ed04a109330e7e9206483c7cdf5ef9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsTextSegmentAddress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2470';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Returns the address of the text segment.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
2A - Each text segment in version 2A groups consists of four characters. A messages of this group can be 
have up to 64 characters. 


2B - In version 2B groups, each text segment consists of only two characters. When the current RDS status is
     using this version, the maximum message length will be 32 characters.

@return uint8_t the address of the text segment.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga71cbaa3e0c103db7cee5969d162bec5d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsText';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2472';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the RDS Text when the message is of the Group Type 2 version A.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return char*  The string (char array) with the content (Text) received from group 2A 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadb0a3c39aeacba0faf39aadd9465021f';
        sec-mem-ref-line = '2290';
        sec-mem-ref-name = 'getNext4Block';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a0b40791484c47c0bf90d8dc255a20269';
        sec-mem-ref-line = '1056';
        sec-mem-ref-name = 'rds_buffer2A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a1c7ec3559a78c5ef1bda49cb0abdf1de';
        sec-mem-ref-line = '1061';
        sec-mem-ref-name = 'rdsTextAdress2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga12d917629b78fffebac5ecf8f2936921';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsText0A';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2473';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the station name and other messages.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 6.@return char* should return a string with the station name. 
        However, some stations send other kind of messages
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gab1f4f137139b40fe386ca51586999e50';
        sec-mem-ref-line = '2255';
        sec-mem-ref-name = 'getNext2Block';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga6e8405ea5846fab586080a7be696178e';
        sec-mem-ref-line = '2292';
        sec-mem-ref-name = 'getRdsReceived';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ac24a8bbd39628c2981208cb452165a0e';
        sec-mem-ref-line = '1058';
        sec-mem-ref-name = 'rds_buffer0A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a11477d1eb13efb348395a4984b67f392';
        sec-mem-ref-line = '1063';
        sec-mem-ref-name = 'rdsTextAdress0A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gae54d0f5562ca7615c3b90bee00c29ab4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsText2A';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2474';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Text processed for the 2A group.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return char* string with the Text of the group A2  
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadb0a3c39aeacba0faf39aadd9465021f';
        sec-mem-ref-line = '2290';
        sec-mem-ref-name = 'getNext4Block';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ga6e8405ea5846fab586080a7be696178e';
        sec-mem-ref-line = '2292';
        sec-mem-ref-name = 'getRdsReceived';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a0b40791484c47c0bf90d8dc255a20269';
        sec-mem-ref-line = '1056';
        sec-mem-ref-name = 'rds_buffer2A';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a1c7ec3559a78c5ef1bda49cb0abdf1de';
        sec-mem-ref-line = '1061';
        sec-mem-ref-name = 'rdsTextAdress2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga806d5cfbbeb6ca1299ce20b1220fdb18';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsText2B';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2475';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the Text processed for the 2B group.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return char* string with the Text of the group AB  
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gab1f4f137139b40fe386ca51586999e50';
        sec-mem-ref-line = '2255';
        sec-mem-ref-name = 'getNext2Block';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a7aa607f80e97d45ac7a80cdcbdeb09f9';
        sec-mem-ref-line = '1057';
        sec-mem-ref-name = 'rds_buffer2B';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1adecc2478d73cd7d18e1f88fd70d1488d';
        sec-mem-ref-line = '1062';
        sec-mem-ref-name = 'rdsTextAdress2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gab86c659a9fff0e24f4f66af2eda147c1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mjdConverter';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'mjd';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'year';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'month';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'day';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2477';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Converts the MJD number to integers Year, month and day.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
      () 


Calculates day, month and year based on MJD


This MJD algorithm is an adaptation of the javascript code found at http://www.csgnetwork.com/julianmodifdateconv.html
@param mjd   mjd number 
@param year  year variable reference 
@param month month variable reference 
@param day day variable reference 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaa8436bb156f3ac8321c65941be42fdba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsTime';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2478';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the RDS time and date when the Group type is 4.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns theUTC Time and offset (to convert it to local time)


return examples: 


12:31 +03:00 


21:59 -02:30

@return  point to char array. Format:  +/-hh:mm (offset)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1af722be88a23730082909000dba8002ae';
        sec-mem-ref-line = '1059';
        sec-mem-ref-name = 'rds_time';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga5579fd16c75370bf36b1633fc00ec033';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsDateTime';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2479';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the RDS the Time and Date when the Group type is 4.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Returns the Date, UTC Time and offset (to convert it to local time)


return examples: 


2021-07-29 12:31 +03:00 


1964-05-09 21:59 -02:30

@return array of char yy-mm-dd hh:mm +/-hh:mm offset
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1af722be88a23730082909000dba8002ae';
        sec-mem-ref-line = '1059';
        sec-mem-ref-name = 'rds_time';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1ga8f7e3991593d58cd59ddcaf3cbb37196';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRdsDateTime';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'year';
        sec-mem-param-defname = 'rYear';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'month';
        sec-mem-param-defname = 'rMonth';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'day';
        sec-mem-param-defname = 'rDay';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'hour';
        sec-mem-param-defname = 'rHour';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'minute';
        sec-mem-param-defname = 'rMinute';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2480';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Decodes the RDS time to LOCAL Julian Day and time.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This method gets the RDS date time massage and converts it from MJD to JD and UTC time to local time


The Date and Time service may not work correctly depending on the FM station that provides the service. 


I have noticed that some FM stations do not use the service properly in my location.  
<br>


Example:
@code 
     uint16_t year, month, day, hour, minute;
     .
     .
     si4735.getRdsStatus();
     si4735.getRdsDateTime(&year, &month, &day, &hour, &minute);
     .
     .        
@endcode
@param rYear  year variable reference 
@param rMonth month variable reference 
@param rDay day variable reference 
@param rHour local hour variable reference 
@param rMinute local minute variable reference 
@return true, it the RDS Date and time were processed 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gab1f4f137139b40fe386ca51586999e50';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getNext2Block';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-defname = 'c';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2482';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Process data received from group 2B.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param c  char array reference to the "group 2B" text 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a07ac2f7392dceae88cf87cf34d9960d1';
        sec-mem-ref-line = '1066';
        sec-mem-ref-name = 'rdsEndGroupB';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga12d917629b78fffebac5ecf8f2936921';
        sec-mem-ref-line = '2350';
        sec-mem-ref-name = 'getRdsText0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga806d5cfbbeb6ca1299ce20b1220fdb18';
        sec-mem-ref-line = '2416';
        sec-mem-ref-name = 'getRdsText2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gadb0a3c39aeacba0faf39aadd9465021f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getNext4Block';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-defname = 'c';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2483';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Process data received from group 2A.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param c  char array reference to the "group  2A" text 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a4b777d713357d2595e8617a63a32adbe';
        sec-mem-ref-line = '1065';
        sec-mem-ref-name = 'rdsEndGroupA';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga71cbaa3e0c103db7cee5969d162bec5d';
        sec-mem-ref-line = '2326';
        sec-mem-ref-name = 'getRdsText';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae54d0f5562ca7615c3b90bee00c29ab4';
        sec-mem-ref-line = '2383';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga55cf9a091d314a1aa21552f2254f756f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBBfo';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'offset';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2485';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SSB Beat Frequency Offset (BFO).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; pages 5 and 23

@param offset 16-bit signed value (unit in Hz). The valid range is -16383 to +16383 Hz. 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga9224e7d4ef14c887da96dbefd2dcefd3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBConfig';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AUDIOBW';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SBCUTFLT';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AVC_DIVIDER';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AVCEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SMUTESEL';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'DSP_AFCDIS';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2486';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the SSB receiver mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
You can use this method for:  
<br>


1) Enable or disable AFC track to carrier function for receiving normal AM signals;


2) Set the audio bandwidth;


3) Set the side band cutoff filter;


4) Set soft-mute based on RSSI or SNR;


5) Enable or disbable automatic volume control (AVC) function. 

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24 

@param AUDIOBW SSB Audio bandwidth; 0 = 1.2kHz (default); 1=2.2kHz; 2=3kHz; 3=4kHz; 4=500Hz; 5=1kHz.
@param SBCUTFLT SSB side band cutoff filter for band passand low pass filter
                if 0, the band pass filter to cutoff both the unwanted side band and high frequency 
                 component > 2kHz of the wanted side band (default).
@param AVC_DIVIDER set 0 for SSB mode; set 3 for SYNC mode.
@param AVCEN SSB Automatic Volume Control (AVC) enable; 0=disable; 1=enable (default).
@param SMUTESEL SSB Soft-mute Based on RSSI or SNR.
@param DSP_AFCDIS DSP AFC Disable or enable; 0=SYNC MODE, AFC enable; 1=SSB MODE, AFC disable. 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '2997';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga7c48f2af416b1f89dbedbfbe9a637620';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSB';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'fromFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'toFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'intialFreq';
        sec-mem-param-defname = 'initialFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'step';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'usblsb';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2487';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Tunes the SSB (LSB or USB) receiver to a frequency between 520 and 30 MHz in 1 kHz steps. 

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; pages 13 and 14
@see setAM()
@see setFrequencyStep()
@see void SI4735::setFrequency(uint16_t freq)

@param fromFreq minimum frequency for the band
@param toFreq maximum frequency for the band
@param initialFreq initial frequency 
@param step step used to go to the next channel  
<br>
@param usblsb SSB Upper Side Band (USB) and Lower Side Band (LSB) Selection; 
              value 2 (banary 10) = USB; 
              value 1 (banary 01) = LSB.   
<br>
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga3e907ddf560a0c8286fa55768701b3da';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSB';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'usblsb';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2488';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the radio to AM function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 7.



Set the radio to SSB (LW/MW/SW) function. 

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; pages 13 and 14 
@see setAM()
@see setFrequencyStep()
@see void SI4735::setFrequency(uint16_t freq)

@param usblsb upper or lower side band;  1 = LSB; 2 = USB
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '404';
        sec-mem-ref-name = 'radioPowerUp';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga6b2ad4d027463262350134490d16bf32';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBAudioBandwidth';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AUDIOBW';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2489';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SSB Audio Bandwidth for SSB mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
0 = 1.2 kHz low-pass filter  (default).


1 = 2.2 kHz low-pass filter.


2 = 3.0 kHz low-pass filter.


3 = 4.0 kHz low-pass filter.


4 = 500 Hz band-pass filter for receiving CW signal, i.e. [250 Hz, 750 Hz] with center 
frequency at 500 Hz when USB is selected or [-250 Hz, -750 1Hz] with center frequency at -500Hz 
when LSB is selected* .


5 = 1 kHz band-pass filter for receiving CW signal, i.e. [500 Hz, 1500 Hz] with center 
frequency at 1 kHz when USB is selected or [-500 Hz, -1500 1 Hz] with center frequency 
    at -1kHz when LSB is selected.


Other values = reserved.



If audio bandwidth selected is about 2 kHz or below, it is recommended to set SBCUTFLT[3:0] to 0 
to enable the band pass filter for better high- cut performance on the wanted side band. Otherwise, set it to 1.

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24 

@param AUDIOBW the valid values are 0, 1, 2, 3, 4 or 5; see description above
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '2997';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gacacf1dac4c0ec170d1da629dd1fd30cb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBAutomaticVolumeControl';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AVCEN';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2490';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets SSB Automatic Volume Control (AVC) for SSB mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24 

@param AVCEN 0 = Disable AVC; 1 = Enable AVC (default).
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '2997';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gae9d50b24642784943fefedbac944a8e8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSBBSidebandCutoffFilter';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SBCUTFLT';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2491';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets SBB Sideband Cutoff Filter for band pass and low pass filters.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
0 = Band pass filter to cutoff both the unwanted side band and high frequency components > 2.0 kHz of the wanted side band. (default)


1 = Low pass filter to cutoff the unwanted side band.
Other values = not allowed.


please call setSSBSidebandCutoffFilter instead setSBBSidebandCutoffFilter

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24

@param SBCUTFLT 0 or 1; see above
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '2997';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1a7554815b6d83128c5b15206e69c51f9f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBSidebandCutoffFilter';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SBCUTFLT';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2492';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gafc5e87c50a1eba6de9504c114cc1cb70';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBAvcDivider';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'AVC_DIVIDER';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2494';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets AVC Divider.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24  
<br>

@param AVC_DIVIDER  SSB mode, set divider = 0; SYNC mode, set divider = 3; Other values = not allowed.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '2997';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga6cde26a5abf759a628012d1457d85c72';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBDspAfc';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'DSP_AFCDIS';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2495';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets DSP AFC disable or enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24 

@param DSP_AFCDIS 0 = SYNC mode, AFC enable; 1 = SSB mode, AFC disable
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '2997';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga91251dfc2ff9488aaef3aa1a528097d9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setSSBSoftMute';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SMUTESEL';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2496';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets SSB Soft-mute Based on RSSI or SNR Selection:
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24 

@param SMUTESEL  0 = Soft-mute based on RSSI (default); 1 = Soft-mute based on SNR.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae1d866bfc4cb37c4268c8942b4b4d062';
        sec-mem-ref-line = '2997';
        sec-mem-ref-name = 'sendSSBModeProperty';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group20_1ga505445484e643ae95a2a9300eac9c4c1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setNBFM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2498';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the radio to FM function.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 \xrefitem todo 8.



Set the radio to NBFM function. 

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; pages 32 and 14 
@see setAM(), setSSB(), setFM()
@see setFrequencyStep()
@see void SI4735::setFrequency(uint16_t freq)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '404';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga22adda493bc8278a376c1ba6f6ea4668';
        sec-mem-ref-line = '3584';
        sec-mem-ref-name = 'setNBFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group20_1ga22adda493bc8278a376c1ba6f6ea4668';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setNBFM';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'fromFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'toFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'initialFreq';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'step';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2499';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Tunes the SSB (LSB or USB) receiver to a frequency between 64 and 108 MHz. 

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; 
@see setAM(), setFM(), setSSB()
@see setFrequencyStep()
@see void SI4735::setFrequency(uint16_t freq)

@param fromFreq minimum frequency for the band
@param toFreq maximum frequency for the band
@param initialFreq initial frequency 
@param step step used to go to the next channel  
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga505445484e643ae95a2a9300eac9c4c1';
        sec-mem-ref-line = '3553';
        sec-mem-ref-name = 'setNBFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group20_1gabed83f2c503dc3b35ca115ef6b08d552';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'patchPowerUpNBFM';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2500';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
This method can be used to prepare the device to apply NBFM patch.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Call queryLibraryId before call this method. Powerup the device by issuing the POWER_UP 
command with FUNC = 0 (FM Receiver).

@see setMaxDelaySetFrequency()
@see MAX_DELAY_AFTER_POWERUP 
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64 and 215-220 and
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE AMENDMENT FOR SI4735-D60 SSB AND NBFM PATCHES; page 32.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadd298b10c6c7e760e7233b50500773c3';
        sec-mem-ref-line = '3529';
        sec-mem-ref-name = 'loadPatchNBFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group20_1gadd298b10c6c7e760e7233b50500773c3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'loadPatchNBFM';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'patch_content';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'patch_content_size';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2501';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Loads a given NBFM patch content.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Configures the Si4735-D60/SI4732-A10 device to work with NBFM. 

@param patch_content        point to patch content array 
@param patch_content_size   size of patch content 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gabed83f2c503dc3b35ca115ef6b08d552';
        sec-mem-ref-line = '3510';
        sec-mem-ref-name = 'patchPowerUpNBFM';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadfc2c82524918224cf19fec5b7fcf6d1';
        sec-mem-ref-line = '3097';
        sec-mem-ref-name = 'queryLibraryId';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group20_1ga5c8c57c727fd102f0eb3d59ec995692f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyNBFM';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'freq';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2502';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the frequency to the corrent function of the Si4735 on NBFM mode.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
You have to call setup or setPowerUp before call setFrequency.

@see maxDelaySetFrequency()
@see MAX_DELAY_AFTER_SET_FREQUENCY
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 70, 135
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 39

@param uint16_t  freq is the frequency to change. For example, FM => 10390 = 103.9 MHz; AM => 810 = 810 kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gadfc2c82524918224cf19fec5b7fcf6d1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_firmware_query_library
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'queryLibraryId';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2504';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Query the library information of the Si47XX device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
SI47XX PATCH RESOURCES
    



Used to confirm if the patch is compatible with the internal device library revision.



You have to call this function if you are applying a patch on SI47XX (SI4735-D60/SI4732-A10).


The first command that is sent to the device is the POWER_UP command to confirm 
that the patch is compatible with the internal device library revision. 


The device moves into the powerup mode, returns the reply, and moves into the 
powerdown mode. 


The POWER_UP command is sent to the device again to configure 
the mode of the device and additionally is used to start the patching process.


When applying the patch, the PATCH bit in ARG1 of the POWER_UP command must be 
set to 1 to begin the patching process. [AN332 (REV 1.0) page 219].

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64 and 215-220.
@see struct si47x_firmware_query_library

@return a struct si47x_firmware_query_library (see it in SI4735.h)
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa554b3390fb6c5a4d6661b96afae73ae';
        sec-mem-ref-line = '454';
        sec-mem-ref-name = 'powerDown';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga591bbfe4dbd39a6de29a37935a6abee5';
        sec-mem-ref-line = '3314';
        sec-mem-ref-name = 'loadPatch';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadd298b10c6c7e760e7233b50500773c3';
        sec-mem-ref-line = '3529';
        sec-mem-ref-name = 'loadPatchNBFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gafaabd6c73b7ad7c20ae959d5b75c1e71';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'patchPowerUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2505';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
This method can be used to prepare the device to apply SSBRX patch.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Call queryLibraryId before call this method. Powerup the device by issuing the POWER_UP 
command with FUNC = 1 (AM/SW/LW Receive).

@see setMaxDelaySetFrequency()
@see MAX_DELAY_AFTER_POWERUP 
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64 and 215-220 and
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE AMENDMENT FOR SI4735-D60 SSB AND NBFM PATCHES; page 7.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga591bbfe4dbd39a6de29a37935a6abee5';
        sec-mem-ref-line = '3314';
        sec-mem-ref-name = 'loadPatch';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gafd1343bd8b4f0c290ef81c418222036c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'downloadPatch';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content_size';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2506';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Transfers the content of a patch stored in a array of bytes to the SI4735 device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
You must mount an array as shown below and know the size of that array as well.



It is importante to say  that patches to the SI4735 are distributed in binary form and 
 have to be transferred to the internal RAM of the device by the host MCU (in this case Arduino).
 Since the RAM is volatile memory, the patch stored into the device gets lost when you turn off 
 the system. Consequently, the content of the patch has to be transferred again to the device 
 each time after turn on the system or reset the device.



The disadvantage of this approach is the amount of memory used by the patch content. 
 This may limit the use of other radio functions you want implemented in Arduino.



Example of content:
@code 
 const PROGMEM uint8_t ssb_patch_content_full[] =
  { // SSB patch for whole SSBRX full download
      0x15, 0x00, 0x0F, 0xE0, 0xF2, 0x73, 0x76, 0x2F,
      0x16, 0x6F, 0x26, 0x1E, 0x00, 0x4B, 0x2C, 0x58,
      0x16, 0xA3, 0x74, 0x0F, 0xE0, 0x4C, 0x36, 0xE4,
         .
         .
         .
      0x16, 0x3B, 0x1D, 0x4A, 0xEC, 0x36, 0x28, 0xB7,
      0x16, 0x00, 0x3A, 0x47, 0x37, 0x00, 0x00, 0x00,
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9D, 0x29};   

 const int size_content_full = sizeof ssb_patch_content_full;
 @endcode

@see Si47XX PROGRAMMING GUIDE; ;AN332 (REV 1.0) pages 64 and 215-220.  
<br>

@param ssb_patch_content point to array of bytes content patch.
@param ssb_patch_content_size array size (number of bytes). The maximum size allowed for a patch is 15856 bytes

 @return false if an error is found.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gaf1b8947db928728ada66ef3edaa79e76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'downloadCompressedPatch';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content_size';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'cmd_0x15';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const int16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'cmd_0x15_size';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2507';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Same downloadPatch.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Transfers the content of a patch stored in a compressed array of bytes to the SI4735 device. 


The first byte of each line of the patch content is a command 0x15 or 0x16.


To shrink the patch size stored into the controller he first byte will be ommited and a new array will be added


to indicate the position where the command 0x15 occours. 
@see  patch_ssb_compressed.h 
@param ssb_patch_content         point to array of bytes content patch.
@param ssb_patch_content_size    array size (number of bytes). The maximum size allowed for a patch is 15856 bytes
@param cmd_0x15                  Array of lines where the first byte of each patch content line is 0x15
@param cmd_0x15_size             Array size      
<br>
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga591bbfe4dbd39a6de29a37935a6abee5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'loadPatch';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint8_t *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_patch_content_size';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ssb_audiobw';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2508';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Loads a given SSB patch content.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Configures the Si4735-D60/SI4732-A10 device to work with SSB. 

@param ssb_patch_content        point to patch content array 
@param ssb_patch_content_size   size of patch content 
@param ssb_audiobw              SSB Audio bandwidth; 0 = 1.2kHz (default); 1=2.2kHz; 2=3kHz; 3=4kHz; 4=500Hz; 5=1kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gafaabd6c73b7ad7c20ae959d5b75c1e71';
        sec-mem-ref-line = '3138';
        sec-mem-ref-name = 'patchPowerUp';
    };
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadfc2c82524918224cf19fec5b7fcf6d1';
        sec-mem-ref-line = '3097';
        sec-mem-ref-name = 'queryLibraryId';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga7751b076ce0bcb62eade4f92cd8d93a6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si4735_eeprom_patch_header
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'downloadPatchFromEeprom';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'eeprom_i2c_address';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2509';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Transfers the content of a patch stored in an eeprom to the SI4735 device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
To used this method, you will need an eeprom with the patch content stored into it. 


This content have to be generated by the sketch <a href="https://github.com/pu2clr/SI4735/tree/master/examples/TOOLS/SI47XX_09_SAVE_SSB_PATCH_EEPROM">SI47XX_09_SAVE_SSB_PATCH_EEPROM</a> on folder TOOLS.

@see SI47XX_09_SAVE_SSB_PATCH_EEPROM
@see si4735_eeprom_patch_header 
@ref https://github.com/pu2clr/SI4735/tree/master/examples/TOOLS/SI47XX_09_SAVE_SSB_PATCH_EEPROM

@param eeprom_i2c_address 
@return false if an error is found.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga0fcfd8e487c594707b3f2aaa71a86d68';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ssbPowerUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2510';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
This function can be useful for debug and test.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group06_1gacfbec075648206fbe25834d998ed9e64';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setMaxDelayPowerUp';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ms';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2522';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Max Delay Power Up.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets the delay needed in ms after a powerup command (default is 10ms).


Some crystal oscillator might need more time to become stable (500 ms is the recommended).


Low values make the load SSB patch faster. However, it can make the system unstable.   
<br>

@see MAX_DELAY_AFTER_POWERUP  
<br>
@param ms delay in ms
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga7bf47d3aab5952fa8895bd9094256dd8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setMaxDelaySetFrequency';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ms';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2538';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set the Max Delay after Set Frequency.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
After the set frequency command, the system need a time to get ready to the next set frequency (default value 30ms).


Why the waitToSend() does not work in this case? No idea for while! 


A low value makes the getFrequency command inaccurate. 

@see  MAX_DELAY_AFTER_POWERUP
@param ms 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga794f6fe7987e146a0135b8e6fabec55c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setFrequencyStep';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'step';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2568';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the current step value.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function does not check the limits of the current band. Please, don't take a step bigger than your legs.


Example:
@code 
setFM(6400,10800,10390,10);
setFrequencyStep(100); // the step will be 1MHz (you are using FM mode)
.
.
.
setAM(7000,7600,7100,5); 
setFrequencyStep(1); // the step will be 1kHz (you are usin AM or SSB mode)  
@endcode 

@see setFM()
@see setAM()
@see setSSB()

@param step if you are using FM, 10 means 100kHz. If you are using AM 10 means 10kHz
            For AM, 1 (1kHz) to 1000 (1MHz) are valid values.
            For FM 5 (50kHz), 10 (100kHz) and 100 (1MHz) are valid values.  
<br>
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga8240278970ae8bf7283e14714b4329ad';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getCurrentFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2584';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current frequency saved in memory.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Unlike getFrequency, this method gets the current frequency recorded after the last setFrequency command. 


This method avoids bus traffic and CI processing.


However, you can not get others status information like RSSI.

@see getFrequency()
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group08_1ga3cf856c44fcfffb3d81b22b1d09b881f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2595';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the current status  of the Si47XX (AM, FM or SSB)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 73 (FM) and 139 (AM)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga748a4027f317972cb2fb1aed4865973b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setDeviceI2CAddress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'senPin';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2600';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the I2C Bus Address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The parameter senPin is not the I2C bus address. It is the SEN pin setup of the schematic (eletronic circuit).


If it is connected to the ground, call this function with senPin = 0; else senPin = 1.


You do not need to use this function if the SEN PIN configured to ground (GND).


The default value is 0x11 (senPin = 0). In this case you have to ground the pin SEN of the SI473X. 


If you want to change this address, call this function with senPin = 1.

@param senPin 0 -  when the pin SEN (16 on SSOP version or pin 6 on QFN version) is set to low (GND - 0V);
              1 -  when the pin SEN (16 on SSOP version or pin 6 on QFN version) is set to high (+3.3V).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga8eddbfb3e62786aa4843d4bcd25da2b9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getDeviceI2CAddress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'resetPin';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2601';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
I2C bus address setup.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Scans for two possible addresses for the Si47XX (0x11 or 0x63).


This function also sets the system to the found I2C bus address of Si47XX.


You do not need to use this function if the SEN PIN is configured to ground (GND). The default I2C address is 0x11.


Use this function if you do not know how the SEN pin is configured.

@param uint8_t  resetPin MCU Mater (Arduino) reset pin

@return int16_t 0x11   if the SEN pin of the Si47XX is low or 0x63 if the SEN pin of the Si47XX is HIGH or 0x0 if error.    
<br>
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadc6014674bd4d1ee3aab56c605926db1';
        sec-mem-ref-line = '297';
        sec-mem-ref-name = 'reset';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1ga668008457910e916ebadf15bda2e5b29';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setDeviceOtherI2CAddress';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'i2cAddr';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2602';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the onther I2C Bus Address (for Si470X)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
You can set another I2C address different of 0x11  and 0x63

@param uint8_t i2cAddr (example 0x10)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1gaecfcd50dbb3d95d66c8cdc77d52af63c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2CLowSpeedMode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2614';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets I2C bus to 10kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The functions below modify the clock frequency for I2C communication. 
100kHz  is usually the baseline.
Use one of these funcition if you have problem on you default configuration. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga00ade87631677b8cc88098d0b55cd5a4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2CStandardMode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2624';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets I2C bus to 100kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
<br>
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga7bb3214f70381cf26bb93f96729d641e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2CFastMode';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2631';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets I2C bus to 400kHz.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga7433b4e80fd3b501efeae7973d29c985';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setI2CFastModeCustom';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
500000
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2644';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the I2C bus to a given value.
ATTENTION: use this function with cation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
<br>

@param value in Hz. For example: The values 500000 sets the bus to 500kHz.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga0a4b4ffbb7e3f2555a16e194eecfc6a1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setAudioMuteMcuPin';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'pin';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2659';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Audio Mute Mcu Pin.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
<br>



This function sets the mcu digital pin you want to use to control the external audio mute circuit.


Some users may be uncomfortable with the loud popping of the speaker during some transitions caused by some SI47XX commands.  
<br>


This problem occurs during the transition from the power down to power up. 


Every time the user changes the mode (FM to AM or AM to FM) the power down and power up commands are required by the Si47XX devices.


If you have a extra circuit in your receiver to mute the audio on amplifier input, you can configure a MCU pin to control it by using this function.

@see setHardwareAudioMute
@param pin if 0 ou greater sets the MCU digital pin will be used to control de external circuit.  
<br>
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga54a3a0f412aa6318df0046d478bd134f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setHardwareAudioMute';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'on';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2675';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the Hardware Audio Mute.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Turns the Hardware audio mute on or off

@see setAudioMuteMcuPin

@param on  True or false
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa554b3390fb6c5a4d6661b96afae73ae';
        sec-mem-ref-line = '454';
        sec-mem-ref-name = 'powerDown';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga3e228da65641f4dcf4253262e19bde9b';
        sec-mem-ref-line = '404';
        sec-mem-ref-name = 'radioPowerUp';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaf8d0ff88ec989d714ab63da39f3897b4';
        sec-mem-ref-line = '574';
        sec-mem-ref-name = 'setup';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group18_1ga133ec11bfc2c68100b47a63da4484767';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'convertToChar';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
char *
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'strValue';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'len';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'dot';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'separator';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'remove_leading_zeros';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
true
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '2681';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Converts a number to a char array.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
It is useful to mitigate memory space used by functions like sprintf or othetr generic similar functions


You can use it to format frequency using decimal or tousand separator and also to convert smalm numbers.      
<br>

@param value  value to be converted
@param strValue char array that will be receive the converted value 
@param len final string size (in bytes) 
@param dot the decimal or tousand separator position
@param separator symbol "." or "," 
@param remove_leading_zeros if true removes up to two leading zeros (default is true)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'class_s_i4735_1ad2e95c88de0dfa58ff7aa36988071421';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'waitInterrupr';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1114';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group05_1gaf361734168c913803e7e2dfbf4fe0c55';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getInterruptStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1115';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Updates bits 6:0 of the status byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This command should be called after any command that sets the STCINT or RSQINT bits. 


When polling this command should be periodically called to monitor the STATUS byte, and when using interrupts, this command should be called after the interrupt is set to update the STATUS byte.


The CTS bit (and optional interrupt) is set when it is safe to send the next command.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 135 
@see si47x_status
@see waitToSend

@return si47x_status the bit data structure with the status response
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group10_1ga4d65660ec2b60d7486165ed8a7a92015';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sendProperty';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'propertyNumber';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'param';
        sec-mem-param-defname = 'parameter';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1121';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sends (sets) property to the SI47XX.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
This method is used for others to send generic properties and params to SI47XX

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 68, 124 and  133.
@see setProperty, sendCommand, getProperty, getCommandResponse

@param propertyNumber property number (example: RX_VOLUME)
@param parameter   property value that will be seted
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1gae1d866bfc4cb37c4268c8942b4b4d062';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sendSSBModeProperty';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1123';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Just send the property SSB_MOD to the device.  Internal use (privete method).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae9d50b24642784943fefedbac944a8e8';
        sec-mem-ref-line = '2891';
        sec-mem-ref-name = 'setSBBSidebandCutoffFilter';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga6b2ad4d027463262350134490d16bf32';
        sec-mem-ref-line = '2921';
        sec-mem-ref-name = 'setSSBAudioBandwidth';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gacacf1dac4c0ec170d1da629dd1fd30cb';
        sec-mem-ref-line = '2856';
        sec-mem-ref-name = 'setSSBAutomaticVolumeControl';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gafc5e87c50a1eba6de9504c114cc1cb70';
        sec-mem-ref-line = '2871';
        sec-mem-ref-name = 'setSSBAvcDivider';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga9224e7d4ef14c887da96dbefd2dcefd3';
        sec-mem-ref-line = '2801';
        sec-mem-ref-name = 'setSSBConfig';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga6cde26a5abf759a628012d1457d85c72';
        sec-mem-ref-line = '2826';
        sec-mem-ref-name = 'setSSBDspAfc';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga91251dfc2ff9488aaef3aa1a528097d9';
        sec-mem-ref-line = '2841';
        sec-mem-ref-name = 'setSSBSoftMute';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group12_1gae4683e9a9fc7a633305b18dae54fbd83';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'disableFmDebug';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1124';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
There is a debug feature that remains active in Si4704/05/3x-D60 firmware which can create periodic noise in audio.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Silicon Labs recommends you disable this feature by sending the following bytes (shown here in hexadecimal form):
0x12 0x00 0xFF 0x00 0x00 0x00.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 299. 
_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gacd89e7b8adefcbc4e89f802acb915906';
        sec-mem-ref-line = '785';
        sec-mem-ref-name = 'setFM';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gac65c552004f5e5e646638e37a5a68213';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsBuffer2A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1125';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear RDS buffer 2A (text)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a0b40791484c47c0bf90d8dc255a20269';
        sec-mem-ref-line = '1056';
        sec-mem-ref-name = 'rds_buffer2A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga350a2033671a7620d4b9290a2347e185';
        sec-mem-ref-line = '2097';
        sec-mem-ref-name = 'getRdsStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaffdba9ca9fb9bf5bb671ac3d448a7e89';
        sec-mem-ref-line = '1929';
        sec-mem-ref-name = 'RdsInit';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gaed0988165057aa2880f41b88ac236cd7';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsBuffer2B';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1126';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear RDS buffer 2B (text)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1a7aa607f80e97d45ac7a80cdcbdeb09f9';
        sec-mem-ref-line = '1057';
        sec-mem-ref-name = 'rds_buffer2B';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga350a2033671a7620d4b9290a2347e185';
        sec-mem-ref-line = '2097';
        sec-mem-ref-name = 'getRdsStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaffdba9ca9fb9bf5bb671ac3d448a7e89';
        sec-mem-ref-line = '1929';
        sec-mem-ref-name = 'RdsInit';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group16_1gadede134b96fd5650b87673ce413babb2';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clearRdsBuffer0A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1127';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear RDS buffer 0A (text)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8h_1ac24a8bbd39628c2981208cb452165a0e';
        sec-mem-ref-line = '1058';
        sec-mem-ref-name = 'rds_buffer0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga350a2033671a7620d4b9290a2347e185';
        sec-mem-ref-line = '2097';
        sec-mem-ref-name = 'getRdsStatus';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaffdba9ca9fb9bf5bb671ac3d448a7e89';
        sec-mem-ref-line = '1929';
        sec-mem-ref-name = 'RdsInit';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group17_1ga5507f4d98f389247320eb19b16395a27';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getSsbAgcStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1128';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Queries SSB Automatic Gain Control STATUS.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
After call this method, you can call isAgcEnabled to know the AGC status and getAgcGainIndex to know the gain index value.

@see AN332 REV 0.8 Universal Programming Guide Amendment for SI4735-D60 SSB and NBFM patches; page 18. 
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga7b45c1b22c3c1a3f2326bee913d1e1e0';
        sec-mem-ref-line = '316';
        sec-mem-ref-name = 'waitToSend';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a0b40791484c47c0bf90d8dc255a20269';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_buffer2A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1056';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Radio Text buffer - Program Information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gac65c552004f5e5e646638e37a5a68213';
        sec-mem-ref-line = '1943';
        sec-mem-ref-name = 'clearRdsBuffer2A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga71cbaa3e0c103db7cee5969d162bec5d';
        sec-mem-ref-line = '2326';
        sec-mem-ref-name = 'getRdsText';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae54d0f5562ca7615c3b90bee00c29ab4';
        sec-mem-ref-line = '2383';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a7aa607f80e97d45ac7a80cdcbdeb09f9';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_buffer2B';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1057';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Radio Text buffer - Station Informaation.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaed0988165057aa2880f41b88ac236cd7';
        sec-mem-ref-line = '1956';
        sec-mem-ref-name = 'clearRdsBuffer2B';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga806d5cfbbeb6ca1299ce20b1220fdb18';
        sec-mem-ref-line = '2416';
        sec-mem-ref-name = 'getRdsText2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1ac24a8bbd39628c2981208cb452165a0e';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_buffer0A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1058';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Basic tuning and switching information (Type 0 groups)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadede134b96fd5650b87673ce413babb2';
        sec-mem-ref-line = '1968';
        sec-mem-ref-name = 'clearRdsBuffer0A';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga12d917629b78fffebac5ecf8f2936921';
        sec-mem-ref-line = '2350';
        sec-mem-ref-name = 'getRdsText0A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1af722be88a23730082909000dba8002ae';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
char
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rds_time';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1059';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS date time received information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga5579fd16c75370bf36b1633fc00ec033';
        sec-mem-ref-line = '2630';
        sec-mem-ref-name = 'getRdsDateTime';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gaa8436bb156f3ac8321c65941be42fdba';
        sec-mem-ref-line = '2454';
        sec-mem-ref-name = 'getRdsTime';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a1c7ec3559a78c5ef1bda49cb0abdf1de';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsTextAdress2A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1061';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
rds_buffer2A current position
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga71cbaa3e0c103db7cee5969d162bec5d';
        sec-mem-ref-line = '2326';
        sec-mem-ref-name = 'getRdsText';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gae54d0f5562ca7615c3b90bee00c29ab4';
        sec-mem-ref-line = '2383';
        sec-mem-ref-name = 'getRdsText2A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1adecc2478d73cd7d18e1f88fd70d1488d';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsTextAdress2B';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1062';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
rds_buffer2B current position
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga806d5cfbbeb6ca1299ce20b1220fdb18';
        sec-mem-ref-line = '2416';
        sec-mem-ref-name = 'getRdsText2B';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a11477d1eb13efb348395a4984b67f392';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsTextAdress0A';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1063';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
rds_buffer0A current position
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1ga12d917629b78fffebac5ecf8f2936921';
        sec-mem-ref-line = '2350';
        sec-mem-ref-name = 'getRdsText0A';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a4b777d713357d2595e8617a63a32adbe';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsEndGroupA';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= false
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1065';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1gadbc1132450ca79ed53e8e8cc0d2fe1d1';
        sec-mem-ref-line = '2392';
        sec-mem-ref-name = 'getEndIndicatorGroupA';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gadb0a3c39aeacba0faf39aadd9465021f';
        sec-mem-ref-line = '2290';
        sec-mem-ref-name = 'getNext4Block';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga339af59bbaefd8d60ba9b26e742bc01e';
        sec-mem-ref-line = '2401';
        sec-mem-ref-name = 'resetEndIndicatorGroupA';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a07ac2f7392dceae88cf87cf34d9960d1';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'rdsEndGroupB';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= false
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1066';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga1cd6e6388fbb853cc24d3e0dc0df1eb6';
        sec-mem-ref-line = '2411';
        sec-mem-ref-name = 'getEndIndicatorGroupB';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8cpp_1gab1f4f137139b40fe386ca51586999e50';
        sec-mem-ref-line = '2255';
        sec-mem-ref-name = 'getNext2Block';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1ga11a5d5eb070466b488e5adec650e625e';
        sec-mem-ref-line = '2421';
        sec-mem-ref-name = 'resetEndIndicatorGroupB';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a243ecc7d01fc0d0e9cabb4ed00b9e47d';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'deviceAddress';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= SI473X_ADDR_SEN_LOW
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1068';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the current I2C bus address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a5f101b95b6fc5127b9e9d92a21f44ab6';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'maxDelaySetFrequency';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= MAX_DELAY_AFTER_SET_FREQUENCY
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1071';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the maximum delay after set frequency command (in ms).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a7ce25193b7f254c75967568967ba4d85';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'maxDelayAfterPouwerUp';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= MAX_DELAY_AFTER_POWERUP
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1072';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the maximum delay you have to setup after a power up command (in ms).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1ad656f75a444c174797f6e7a8bf6e6ee2';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'maxSeekTime';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= MAX_SEEK_TIME
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1073';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the maximum time (ms) for a seeking process. Defines the maximum seeking time.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = '_s_i4735_8h_1gaed67e2cee4e20551f3d522eea45fb7f5';
        sec-mem-ref-line = '2219';
        sec-mem-ref-name = 'setMaxSeekTime';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1abd965c0e49493bc2c7c37547d36dcc96';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lastTextFlagAB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1075';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a6470177f747ef7eb8e7d02c76f72b19e';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resetPin';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1076';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
pin used on Arduino Board to RESET the Si47XX device
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1acc3d3a411d181e08846219661dbde1c4';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentTune';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1078';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
tell the current tune (FM, AM or SSB)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a4663c1c92d980472556368944cb2fc68';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentMinimumFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1080';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
minimum frequency of the current band
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1aa3d41ad3fdb9d821a721a8acfaf47670';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentMaximumFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1081';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
maximum frequency of the current band
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a9da4f3df9e5e6b0448eff15e12f690dd';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentWorkFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1082';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
current frequency
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1ad72759f246cceb147bf031b72173b0ca';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentStep';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1084';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the current step used to increment or decrement the frequency.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a157e4ae8cd53396973584aa10888cd47';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lastMode';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= -1
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1086';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the last mode used.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a650490ab792c1853c97f600661ecdaa1';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentAvcAmMaxGain';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= DEFAULT_CURRENT_AVC_AM_MAX_GAIN
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1088';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the current Automatic Volume Control Gain for AM.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a1ed7daaa2bd7f4619d50815e2ab5e520';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentClockType';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= XOSCEN_CRYSTAL
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1089';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the current clock type used (Crystal or REF CLOCK)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a015d495717833b3a7e0b4a5ea8f09158';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ctsIntEnable';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1090';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1aa1a6e6b5698880e9c72506d8d7f2dcb0';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'gpo2Enable';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1091';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a27aa16267153f881845b57818a58053e';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refClock';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 32768
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1093';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Frequency of Reference Clock in Hz.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a9a9b7b8edceaf2bba16766c29af3b0a2';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refClockPrescale';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 1
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1094';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Prescaler for Reference Clock (divider).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a57f9da1eec6479f905f34e83f69eb3b6';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refClockSourcePin';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1095';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
0 = RCLK pin is clock source; 1 = DCLK pin is clock source.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a4439c40db789f02371ea0fb9b22650c5';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_frequency
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentFrequency';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1097';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
data structure to get current frequency
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a8253ae2f3c87a6943776f8a63a691ca3';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_set_frequency
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentFrequencyParams';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1098';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a9edd8cc9254695631795e7efc008eb28';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_rqs_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentRqsStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1099';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
current Radio SIgnal Quality status
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a7ad35ba002b73b66e9ce97b304854695';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_response_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1100';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
current device status
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1ad03d545e53a7ca2fe072a7b03d60910e';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_firmware_information
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'firmwareInfo';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1101';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
firmware information
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a42d5c6991d90ea1c8ae35b74f8bccc48';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_rds_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentRdsStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1102';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
current RDS status
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1adf2d1f37ec9edf95e14aecb3cdc7417d';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_agc_status
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentAgcStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1103';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
current AGC status
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a74ee9c99b1e092f7b1efa2f771f38324';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si47x_ssb_mode
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentSSBMode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1104';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
indicates if USB or LSB
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a1331b701088bda20bf0844e2e38be142';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
si473x_powerup
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'powerUp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1106';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1aa5220772c468fcfb69b5d16163de73fc';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'volume';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 32
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1108';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stores the current vlume setup (0-63).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a46c6ea8c36a2c4c47ee9cac8dd314319';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentAudioMode';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= SI473X_ANALOG_AUDIO
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1110';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Current audio mode used (ANALOG or DIGITAL or both)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a05730ca069db4be7c45a9c92f29d3b52';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'currentSsbStatus';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1111';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_s_i4735_1a1a521eccd64f760a6f6a1ae55c20f2b9';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'audioMuteMcuPin';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= -1
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1112';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '1054';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
SI4735 Class.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
SI4735 Class definition


This class implements all functions to help you to control the Si47XX devices. 
This library was built based on âSi47XX PROGRAMMING GUIDE; AN332 (REV 1.0)â. 
It also can be used on all members of the SI473X family respecting, of course, the features available 
for each IC version.  These functionalities can be seen in the comparison matrix shown in 
table 1 (Product Family Function); pages 2 and 3 of the programming guide.

@author PU2CLR - Ricardo Lima Caratti 
_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 8;
        node-label = 'si473x_powerup';
        node-link = {
          node-link-id = 'group__group01#unionsi473x__powerup';
        };
      }; /* node */
      node = {
        node-id    = 9;
        node-label = 'si47x_rqs_status';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__rqs__status';
        };
      }; /* node */
      node = {
        node-id    = 10;
        node-label = 'si47x_frequency';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__frequency';
        };
      }; /* node */
      node = {
        node-id    = 3;
        node-label = 'si47x_response_status';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__response__status';
        };
      }; /* node */
      node = {
        node-id    = 5;
        node-label = 'si47x_set_frequency';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__set__frequency';
        };
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'si47x_rds_status';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__rds__status';
        };
      }; /* node */
      node = {
        node-id    = 4;
        node-label = 'si47x_ssb_mode';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__ssb__mode';
        };
      }; /* node */
      node = {
        node-id    = 7;
        node-label = 'si47x_firmware_information';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__firmware__information';
        };
      }; /* node */
      node = {
        node-id    = 1;
        node-label = 'SI4735';
        node-link = {
          node-link-id = 'class_s_i4735';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentRdsStatus
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '3';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentStatus
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '4';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentSSBMode
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '5';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentFrequencyParams
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '6';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentAgcStatus
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '7';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
firmwareInfo
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '8';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
powerUp
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '9';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentRqsStatus
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
        node-child = {
          child-id = '10';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
currentFrequency
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 6;
        node-label = 'si47x_agc_status';
        node-link = {
          node-link-id = 'group__group01#unionsi47x__agc__status';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* class */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si4735_digital_output_format';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a2f5af498b9dfe1e33765207842b3796d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si4735_digital_output_format::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1000';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0fa2c05d8877d3c680e904842993c33e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1001';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '992';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Digital audio output format data structure (Property 0x0102. DIGITAL_OUTPUT_FORMAT).
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Used to configure: DCLK edge, data format, force mono, and sample precision.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 195. 
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); chapter 9 - Digital Audio Interface
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si4735_digital_output_format.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8e0cf30fb9cddc896d94167934615d42';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OSIZE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '995';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Digital Output Audio Sample Precision (0=16 bits, 1=20 bits, 2=24 bits, 3=8bits).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a61324adf2d131b4df8038991cbca0842';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OMONO';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '996';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Digital Output Mono Mode (0=Use mono/stereo blend ).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a870fffeed608a381a3abc7e27b22a7ee';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OMODE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '997';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Digital Output Mode (0000=I2S, 0110 = Left-justified, 1000 = MSB at second DCLK after DFS pulse, 1100 = MSB at first DCLK after DFS pulse).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abfdc1bd5a8f46739eef7fd4fa44ad600';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OFALL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '998';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Digital Output DCLK Edge (0 = use DCLK rising edge, 1 = use DCLK falling edge)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a275876e34cf609db118f3d84b799a790';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dummy';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '999';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '994';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si4735_digital_output_sample_rate';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9988ba829a46409f23d7cb9bb0f156d9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DOSR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1034';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '1033';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Digital audio output sample structure (Property 0x0104. DIGITAL_OUTPUT_SAMPLE_RATE).
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Used to enable digital audio output and to configure the digital audio output sample rate in samples per second (sps).

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 196. 
_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si4735_eeprom_patch_header';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a206c5907140c242eff43969fdbf1ee39';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si4735_eeprom_patch_header::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1019';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a94433975a0b1ff748a66a19e4125dc5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1020';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '1012';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
patch header stored in a eeprom
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
This data type represents o header of a eeprom with a patch content 


This structure will be used to read an eeprom generated by leo sketch SI47XX_09_SAVE_SSB_PATCH_EEPROM.ino.


The sketch SI47XX_09_SAVE_SSB_PATCH_EEPROM can be found on Examples/SI47XX_TOOLS folder   
<br>
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si4735_eeprom_patch_header.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a327e0f8ef808c5d8c6072a07f0a26d26';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'reserved';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1015';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a824abc0aadb3f2d4a53b915f10a2a60b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'status';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1016';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a6672901531915ba41508c09a77f77a8d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'patch_id';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1017';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ac951249c14ef40b4436af008145347a9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'patch_size';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '1018';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '1014';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_gpio';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af785eeee072dbe5d532fc7e76cd9e8eb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si473x_gpio::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '269';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Refined powerup parameters.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae560f6b01049205986b273a5c491081d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '270';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '261';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data type for Enables output for GPO1, GPO2 and GPO3.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
GPO1, 2, and 3 can be configured for output (Hi-Z or active drive) by setting the GPO1OEN, GPO2OEN, and GPO3OEN bit. 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 82 and 144
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_gpio.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '264';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9e8c8440a0de220ec3e67ac942bc93ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GPO1OEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '265';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
GPO1 Output Enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a16e39ff0e3715799964f55ae2059869d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GPO2OEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '266';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
GPO2 Output Enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9192331445de77eec6c569dd39215683';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GPO3OEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '267';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
GPO3 Output Enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '268';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '263';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_gpio_ien';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a41278f2e60bae96f74a825b4a741e273';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si473x_gpio_ien::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '296';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa1d2b8d04e8ae43c085f8223b15812e9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '297';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '283';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data type for Configuring the sources for the GPO2/INT interrupt pin.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Valid sources are the lower 8 bits of the STATUS byte, including CTS, ERR, RSQINT, and STCINT bits.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 146
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_gpio_ien.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab09bf67829bc4d5914945a87be624698';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCIEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '286';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek/Tune Complete Interrupt Enable (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '287';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1afa4d97a23dde5b951754d19241a9c117';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQIEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '288';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSQ Interrupt Enable (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '289';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a459917c791e67eab1cdc18407dc6f507';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERRIEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '290';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ERR Interrupt Enable (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a70cc84d478cf749951dcd0abde88b0ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTSIEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '291';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CTS Interrupt Enable (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3d9c07e46addffde9770f779a2f71864';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCREP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '292';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STC Interrupt Repeat (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a613aa5c14b3ccc6304a519292c482ed1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '293';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7370ae224941074a02e32d4ee6901d56';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQREP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '294';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSQ Interrupt Repeat (0 or 1).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9182569d693623e6b469099542b303e4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY4';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '295';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '285';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_powerup';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1d76ab95c8f37f3ee9f2266e0a818455';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si473x_powerup::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '247';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Refined powerup parameters.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab82e658c5816b0c31e32e100ff776ebe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '248';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Raw powerup parameters data. Same arg memory position. So, same content.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '236';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Power Up arguments data type.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 64 and 65
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si473x_powerup.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1e49c8ad07b69571bfcafaf18ac9fa5b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FUNC';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '240';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Function (0 = FM Receive; 1â14 = Reserved; 15 = Query Library ID)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a22c9aef8785be330d7e1faf88bcfd4b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'XOSCEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '241';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Crystal Oscillator Enable (0 = crystal oscillator disabled; 1 = Use crystal oscillator and and OPMODE=ANALOG AUDIO) .
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a63bc9a3997d66d835d9f3ec29451407d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PATCH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '242';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Patch Enable (0 = Boot normally; 1 = Copy non-volatile memory to RAM).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a16e39ff0e3715799964f55ae2059869d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GPO2OEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '243';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
GPO2 Output Enable (0 = GPO2 output disabled; 1 = GPO2 output enabled).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a70cc84d478cf749951dcd0abde88b0ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTSIEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '244';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CTS Interrupt Enable (0 = CTS interrupt disabled; 1 = CTS interrupt enabled).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1adc7ae7360da2a9886f674ed6943a2524';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'OPMODE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '246';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Application Setting. See page 65.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '238';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_agc_overrride';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a05a271d0b62d67a76532e70016cc5056';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_agc_overrride::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '928';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7b8218655c25e1f8d75d92818ec24f20';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '929';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '920';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
If FM, Overrides AGC setting by disabling the AGC and forcing the LNA to have a certain gain that ranges between 0 
(minimum attenuation) and 26 (maximum attenuation).
If AM, overrides the AGC setting by disabling the AGC and forcing the gain index that ranges between 0

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); For FM page 81; for AM page 143
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_agc_overrride.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aeaad2cabb6417746b2dd432eda476f55';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AGCDIS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '924';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abd2103035a8021942390a78a431ba0c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '925';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a26bd0af30c189325bd004e10593eb5cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AGCIDX';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '927';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '922';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_agc_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aac4fc78ed4e4f265c74a9e50c2e63592';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_agc_status::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '906';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a2f03c32a90a7991f2433bf8a5291885d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '907';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '890';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
AGC data types
FM / AM and SSB structure to AGC

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); For FM page 80; for AM page 142
@see AN332 REV 0.8 Universal Programming Guide Amendment for SI4735-D60 SSB and NBFM patches; page 18. 
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_agc_status.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '894';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '895';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '896';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '897';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '898';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '899';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '900';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aeaad2cabb6417746b2dd432eda476f55';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AGCDIS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '902';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abd2103035a8021942390a78a431ba0c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '903';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a26bd0af30c189325bd004e10593eb5cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AGCIDX';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '905';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '892';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_antenna_capacitor';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab7ef1b0222904baf09a919e5704cdd44';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_antenna_capacitor::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '326';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa59f9604df88a98b91295b0a9c009bbd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'value';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '327';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '321';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Antenna Tuning Capacitor data type manupulation.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_antenna_capacitor.raw';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0475bf71e813922e317ef7cb7b3df9fa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '324';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Antenna Tuning Capacitor High byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5f437dbf77cdadcbb215ce5db44edbe6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '325';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Antenna Tuning Capacitor Low byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '323';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_bandwidth_config';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5da2dcc72ae3a6f0ced1aad7594362d5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_bandwidth_config::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'param';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '955';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa8fd81f2f62788fac6c3cce7b1ea765d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '956';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '948';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
The bandwidth of the AM channel filter data type
AMCHFLT values: 0 = 6 kHz Bandwidth                    
<br>
                1 = 4 kHz Bandwidth
                2 = 3 kHz Bandwidth
                3 = 2 kHz Bandwidth
                4 = 1 kHz Bandwidth
                5 = 1.8 kHz Bandwidth
                6 = 2.5 kHz Bandwidth, gradual roll off
                7â15 = Reserved (Do not use)

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 125 and 151
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_bandwidth_config.param';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ad992f11e8896f68a81b13fcd6ae2a3b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AMCHFLT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '951';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Selects the bandwidth of the AM channel filter.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '952';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae6741d3dc93d6502bb837ca874ee4f94';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AMPLFLT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '953';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enables the AM Power Line Noise Rejection Filter.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '954';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '950';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_firmware_information';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4f71bb27ff0e3ba8de0412d43a63010e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_firmware_information::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '487';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa2ba7bbaa745c8ca18c83226246654e5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '488';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '467';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data representation for  Firmware Information (GET_REV)
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
The part number, chip revision, firmware revision, patch revision and component revision numbers. 

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 66 and 131 
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_firmware_information.resp';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '471';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '472';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '473';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '474';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '475';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '476';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '477';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7b6166324dc52f374d908e03602b1daf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '478';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP1 - Final 2 digits of Part Number (HEX).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a67c65213847ea2a824306b665bd2851f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FWMAJOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '479';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP2 - Firmware Major Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae0c243088677f14fc8dd9c9508e068ff';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FWMINOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '480';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP3 - Firmware Minor Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3ab7055a80e6c432a1116bfb27181811';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PATCHH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '481';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP4 - Patch ID High byte (HEX).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a07cead1237e34b4696dce647443ad10e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PATCHL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '482';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP5 - Patch ID Low byte (HEX).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aab5038bb547e9aa4b543112de6904611';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CMPMAJOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '483';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP6 - Component Major Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a62c98580b8d5220cf351861ddd86fd07';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CMPMINOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '484';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP7 - Component Minor Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab9dbe73951d365ea8a945760cec79a5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CHIPREV';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '485';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP8 - Chip Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '469';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_firmware_query_library';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4b1bc1ed10aa884ede69b0ae5561cbba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_firmware_query_library::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '523';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5235c5b07b71d6dc4c76c275a091c63c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '524';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '504';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Firmware Query Library ID response.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Used to represent the response of a power up command with FUNC = 15 (patch)

To confirm that the patch is compatible with the internal device library revision, the library 
revision should be confirmed by issuing the POWER_UP command with Function = 15 (query library ID)

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 12 
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_firmware_query_library.resp';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '508';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '509';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '510';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '511';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '512';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '513';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '514';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7b6166324dc52f374d908e03602b1daf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '515';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP1 - Final 2 digits of Part Number (HEX).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a67c65213847ea2a824306b665bd2851f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FWMAJOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '516';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP2 - Firmware Major Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae0c243088677f14fc8dd9c9508e068ff';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FWMINOR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '517';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP3 - Firmware Minor Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ad8179a090910d4923b044cbce813c8ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '518';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP4 - Reserved, various values.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0b5885d29a74762639e4b55c51ce2d85';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '519';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP5 - Reserved, various values.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab9dbe73951d365ea8a945760cec79a5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CHIPREV';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '520';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP6 - Chip Revision (ASCII).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1afb747a51a99db36a17a01f11e3cafbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'LIBRARYID';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '521';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP7 - Library Revision (HEX).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '506';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_frequency';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a238632206d118acac9b1ede44a0d3af6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_frequency::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '312';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Raw data that represents the frequency stored in the Si47XX device.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aad12ac434ec9907e90a3f6b95377ca76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'value';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '313';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
frequency (integer value)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '307';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Represents how the  frequency is stored in the si4735.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
It helps to convert frequency in uint16_t to two bytes (uint8_t) (FREQL and FREQH)  
<br>
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_frequency.raw';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a858dfb4be81dfbd057aa63aded06bf3d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREQL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '310';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Tune Frequency Low byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8836c6ec927c24305d2fd26a5aec2e2b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREQH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '311';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Tune Frequency High byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '309';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_frontend_agc_control';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aba5582f017d6f5d656993ba8d4a97795';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_frontend_agc_control::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'field';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '623';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aff89664deed303ec065bbad68b2053ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'word';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '624';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '618';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Adjusts the AM AGC for external front-end attenuator and external front-end cascode LNA.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROAMMING GUIDE; AN332 (REV 1.0); page 168
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_frontend_agc_control.field';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aae22ea8fbb38533f36125b5ccc45338b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ATTN_BACKUP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '621';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aeb3a984f28076574a7347412473f7c13';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MIN_GAIN_INDEX';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '622';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '620';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_property';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae671ffe4b04609a80825fc1df1a7e292';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_property::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '560';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7c04205c5a1798b35b738b2908853bfa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'value';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '561';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '555';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data type to deal with SET_PROPERTY command.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Property Data type (help to deal with SET_PROPERTY command on si473X)
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_property.raw';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1f3859652867ab4a967c5caa3e2ab353';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'byteLow';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '558';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7b280732d6c370d505d537b0ab9f7e30';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'byteHigh';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '559';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '557';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blocka';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a404ba554979caaf39c11a7783a596bd1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blocka::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '766';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a809d189eba718f9245672c9abab05690';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blocka::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '771';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '762';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Block A data type.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blocka.raw';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aaee469db16fdff1aa5439b776b3d5860';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'highValue';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '769';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a72a22270b4e47acf046fad64a8720e4f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lowValue';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '770';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '768';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blocka.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a72ab8af56bddab33b269c5964b26620a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'pi';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '765';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '764';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blockb';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abed5e383b3c62bc0a091efdd326c40d8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blockb::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'group0';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '804';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8e070d0226a78cd520ede1037a6a24d4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blockb::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'group2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '813';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ad3111bc05fa4a108d7d7eadf0dbe94ba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blockb::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '822';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1afb2283c294aa4046fb606eef18839331';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_blockb::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '827';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '793';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Block B data type.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
For GCC on System-V ABI on 386-compatible (32-bit processors), the following stands:

1) Bit-fields are allocated from right to left (least to most significant).
2) A bit-field must entirely reside in a storage unit appropriate for its declared type.
   Thus a bit-field never crosses its unit boundary.
3) Bit-fields may share a storage unit with other struct/union members, including members that are not bit-fields.
   Of course, struct members occupy different parts of the storage unit.
4) Unnamed bit-fields' types do not affect the alignment of a structure or union, although individual 
   bit-fields' member offsets obey the alignment constraints.   
<br>

@see also Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 78 and 79
@see also https://en.wikipedia.org/wiki/Radio_Data_System
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blockb.group0';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a884d9804999fc47a3c2694e49ad2536a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'address';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '796';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa1b1c0cd777edd2e5cfcaf8e2e7dcab8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DI';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '797';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7a663caea1b722a63dc2868158ed584d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '798';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a890a10788493e3d572586e991cd43543';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'TA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '799';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a264bd2c2ca8c895803767b0d39ff4a09';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'programType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '800';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a59e69d63ce38754ea53c4461b5cba1e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'trafficProgramCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '801';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a20583dcf173525a78f726ef45329c5ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'versionCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '802';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a19223bd3731a4215ead3ba6a1eb8bbe8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'groupType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '803';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '795';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blockb.group2';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a884d9804999fc47a3c2694e49ad2536a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'address';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '807';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a652bfdc159637b708ac6e6f92d7650bc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'textABFlag';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '808';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a264bd2c2ca8c895803767b0d39ff4a09';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'programType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '809';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a59e69d63ce38754ea53c4461b5cba1e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'trafficProgramCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '810';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a20583dcf173525a78f726ef45329c5ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'versionCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '811';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a19223bd3731a4215ead3ba6a1eb8bbe8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'groupType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '812';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '806';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blockb.raw';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a72a22270b4e47acf046fad64a8720e4f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lowValue';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '825';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aaee469db16fdff1aa5439b776b3d5860';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'highValue';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '826';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '824';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_blockb.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9a0364b9e99bb480dd25e1f0284c8555';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'content';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '816';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a652bfdc159637b708ac6e6f92d7650bc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'textABFlag';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '817';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a264bd2c2ca8c895803767b0d39ff4a09';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'programType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '818';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a59e69d63ce38754ea53c4461b5cba1e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'trafficProgramCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '819';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a20583dcf173525a78f726ef45329c5ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'versionCode';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '820';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a19223bd3731a4215ead3ba6a1eb8bbe8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'groupType';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '821';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '815';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_command';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abc89226fb1cac2f4db84d19f6aac5960';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_command::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '643';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3c151920e2f167bfa7c47193a20ecb58';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '644';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '636';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data type for RDS Status command and response information.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 77 and 78 
@see Also https://en.wikipedia.org/wiki/Radio_Data_System
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_command.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa1b4c5526f2abe4a5d02be4016a44020';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTACK';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '639';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a89ada8287a1cbe8c1cbcbaf629797e69';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MTFIFO';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '640';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0ad827114d7e2367674a05bbcdc53eda';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STATUSONLY';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '641';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a275876e34cf609db118f3d84b799a790';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dummy';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '642';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '638';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_config';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a54505a8468e1aafafe7bb7485c2241e9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_config::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '752';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ace0fc779a1af19098b03178fcbaafffe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '753';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '743';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Data type for FM_RDS_CONFIG Property.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
IMPORTANT: all block errors must be less than or equal the associated block error threshold for the group 
to be stored in the RDS FIFO. 
0 = No errors; 1 = 1â2 bit errors detected and corrected; 2 = 3â5 bit errors detected and corrected; 3 = Uncorrectable.
Recommended Block Error Threshold options:
 2,2,2,2 = No group stored if any errors are uncorrected.
 3,3,3,3 = Group stored regardless of errors.
 0,0,0,0 = No group stored containing corrected or uncorrected errors.
 3,2,3,3 = Group stored with corrected errors on B, regardless of errors on A, C, or D.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 58 and 104 
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_config.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af06feb780d38d7dc59d42878a3353c7f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '746';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = RDS Processing Enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '747';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a08e321d989e5154ff4e8a2b5d0fbb057';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLETHD';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '748';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Block Error Threshold BLOCKD.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1246c30829bddc4264fe51b0abc00dbe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLETHC';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '749';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Block Error Threshold BLOCKC.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a659adbc2d25b37801235e309fb25737f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLETHB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '750';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Block Error Threshold BLOCKB.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a955ffa2ef1f258071376294e01482059';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLETHA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '751';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Block Error Threshold BLOCKA.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '745';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_date_time';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aca88dde0784fe180c29a66b4e0b65104';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_date_time::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '876';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4632acc947ded9cc9577df163fabba69';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '877';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '865';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Group type 4A ( RDS Date and Time)
When group type 4A is used by the station, it shall be transmitted every minute according to EN 50067.
This Structure uses blocks 2,3 and 5 (B,C,D)

ATTENTION: 
To make it compatible with 8, 16 and 32 bits platforms and avoid Crosses boundary, it was necessary to
split minute and hour representation. 
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_date_time.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7a86c157ee9713c34fbd7a1ee40f0c5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'offset';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '868';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5ba6e404c489ff4f757e7c77cb9fa310';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'offset_sense';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '869';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a756bdae430708e155654a844c2bcc33b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'minute1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '870';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a57b42af48e9b3407c002d157d89f50ad';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'minute2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '871';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0351524e66b386b6638dd47c0d00de65';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'hour1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '872';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a38034b153ffba397eebfcd07b4a50414';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'hour2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '873';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abf95cba2a7cd3238d68d88304a160e72';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mjd1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '874';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acbf8a026d116d2545677d561df0747fe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mjd2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '875';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '867';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_int_source';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab5540a81bf1596dbbc015ef2f458a5b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_int_source::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '722';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abfd03e295ce96a214407c2705d9b96c7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '723';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '711';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
FM_RDS_INT_SOURCE property data type.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); page 103
@see also https://en.wikipedia.org/wiki/Radio_Data_System
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_int_source.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa75f4ec874d6a5f181b8e423950bfde0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSRECV';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '714';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, generate RDSINT when RDS FIFO has at least FM_RDS_INT_FIFO_COUNT entries.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a95a3b24fca811ec5f3f6572fe7da0bcf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSSYNCLOST';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '715';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, generate RDSINT when RDS loses synchronization.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1cd218d6a523d2d9120d8ab8a9dd93c7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSSYNCFOUND';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '716';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
f set, generate RDSINT when RDS gains synchronization.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '717';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write to 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa2d4c2b673c2842773854cdd6f28e033';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSNEWBLOCKA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '718';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, generate an interrupt when Block A data is found or subsequently changed.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a67434ed313bef4d6221df6a51971c994';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSNEWBLOCKB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '719';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, generate an interrupt when Block B data is found or subsequently changed.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '720';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved - Always write to 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a613aa5c14b3ccc6304a519292c482ed1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '721';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved - Always write to 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '713';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a48fe19756bd1b858964dd8a74c5651a3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rds_status::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '698';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a526947c93583b28968de411b0206fdfb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '699';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '655';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Response data type for current channel and reads an entry from the RDS FIFO.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 77 and 78
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rds_status.resp';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '659';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '660';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '661';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '662';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '663';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '664';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '665';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa75f4ec874d6a5f181b8e423950bfde0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSRECV';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '667';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Received; 1 = FIFO filled to minimum number of groups set by RDSFIFOCNT.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a95a3b24fca811ec5f3f6572fe7da0bcf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSSYNCLOST';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '668';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Sync Lost; 1 = Lost RDS synchronization.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1cd218d6a523d2d9120d8ab8a9dd93c7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSSYNCFOUND';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '669';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Sync Found; 1 = Found RDS synchronization.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a613aa5c14b3ccc6304a519292c482ed1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '670';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa2d4c2b673c2842773854cdd6f28e033';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSNEWBLOCKA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '671';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS New Block A; 1 = Valid Block A data has been received.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a67434ed313bef4d6221df6a51971c994';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSNEWBLOCKB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '672';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS New Block B; 1 = Valid Block B data has been received.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9182569d693623e6b469099542b303e4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY4';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '673';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a67a91dac9065974c1b69fea4ad395faf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSSYNC';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '675';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDS Sync; 1 = RDS currently synchronized.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1fc4251a40ec4352f10fc3ecb20f2c79';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY5';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '676';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a97eaf5b8af040d5cc1d1951e45846c72';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'GRPLOST';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '677';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Group Lost; 1 = One or more RDS groups discarded due to FIFO overrun.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae47e340f9899842ec70c03024de8cf89';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY6';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '678';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4a3b791b8fe2bf1f76df87f754967f5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSFIFOUSED';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '680';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP3 - RDS FIFO Used; Number of groups remaining in the RDS FIFO (0 if empty).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a2843da4b952c7be9fb480c58a29ea378';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKAH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '681';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP4 - RDS Block A; HIGH byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0f0906669ad239fff687df038925d138';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKAL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '682';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP5 - RDS Block A; LOW byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a41992f4f83625a17ffbb4df533f4d192';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKBH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '683';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP6 - RDS Block B; HIGH byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5393be02dfd7f56d0567e5f1406fffed';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKBL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '684';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP7 - RDS Block B; LOW byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae464b56d44650f86be59aeef27abfbbe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKCH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '685';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP8 - RDS Block C; HIGH byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8c78c7dd8484c36b843457e3e4f165ac';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKCL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '686';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP9 - RDS Block C; LOW byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ab46176005c9a362139e953d3633ed8f8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKDH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '687';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP10 - RDS Block D; HIGH byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae0fd3095e63eb37b945a03706e7fa697';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLOCKDL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '688';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP11 - RDS Block D; LOW byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a7d449b80d36bbc910ef88b6fcfe90364';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLED';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '694';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8e74ab448e91f67eaabee7a52ab05fec';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLEC';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '695';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa4eb947cc07974dfc44c1da340b21c0f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLEB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '696';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abe92870ea28d50ecdfd8f987836e103f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLEA';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '697';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '657';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_response_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa8d3424f318eb0c292eed612f5710c44';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_response_status::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '453';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9b236e03804629e73a4b19fddb72b4cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '454';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Check it.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '425';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Response status command.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Response data from a query status command

@see Si47XX PROGRAMMING GUIDE; pages 73 and 
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_response_status.resp';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '429';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Seek/Tune Complete Interrupt; 1 = Tune complete has been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '430';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '431';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Radio Data System (RDS) Interrup; 0 = interrupt has not been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '432';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Received Signal Quality Interrupt; 0 = interrupt has not been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '433';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '434';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Error. 0 = No error 1 = Error.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '435';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear to Send.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ac9f1a6384b1c466d4612f513bd8e13ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'VALID';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '437';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Valid Channel.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4f37d8e1a484e1ac152858e71923f86c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AFCRL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '438';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
AFC Rail Indicator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a613aa5c14b3ccc6304a519292c482ed1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '439';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4163d039102268d1b6ac272a25006d7f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLTF';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '440';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reports if a seek hit the band limit.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0d093ad5e587811b66f0047303ec86a9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'READFREQH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '442';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read Frequency High byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ad667880f1209fa0da1d2c87c794329c7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'READFREQL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '444';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read Frequency Low byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a6833f5d3374c1679bea428b50dbad9cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSSI';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '446';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Received Signal Strength Indicator (dBÎ¼V)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8dc5367d65459f69d78eb03e93f7703f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SNR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '448';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
This byte contains the SNR metric when tune is complete (dB).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a36b0ca295026d76ee15df50dc4991e90';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MULT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '450';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If FM, contains the multipath metric when tune is complete; IF AM READANTCAPH (tuning capacitor value high byte)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa4c3e6fac8670fa0b36ba68ff185aa24';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'READANTCAP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '452';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If FM, contains the current antenna tuning capacitor value; IF AM READANTCAPL (tuning capacitor value low byte)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '427';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rqs_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af86aa3d6afe48037aa0a364388d29d57';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_rqs_status::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'resp';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '608';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a184e0892bc82522efe50c49836bb8cc5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '609';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '574';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Radio Signal Quality data representation.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Data type for status information about the received signal quality (FM_RSQ_STATUS and AM_RSQ_STATUS)

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 75 and 
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_rqs_status.resp';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '578';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '579';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '580';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '581';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '582';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '583';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '584';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a78e3f2f0b0c5b1dfd51e3c0d48ae18e3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSSIILINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '586';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSSI Detect Low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1c2886a1d02e462622c810dec48a7a8d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSSIHINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '587';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSSI Detect High.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a97383bc737ce99a121985160e6ffa344';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SNRLINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '588';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SNR Detect Low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae2e739596a7340b62844e12390115e6a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SNRHINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '589';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SNR Detect High.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af07f7e10faec4b062b389868532a8146';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MULTLINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '590';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Multipath Detect Low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a6b4ed08de1237c36d005669ead7d8a50';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MULTHINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '591';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Multipath Detect High.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a613aa5c14b3ccc6304a519292c482ed1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '592';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a78a25db6cd73b193ba6c941df8584d35';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'BLENDINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '593';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Blend Detect Interrupt.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ac9f1a6384b1c466d4612f513bd8e13ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'VALID';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '595';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Valid Channel.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a4f37d8e1a484e1ac152858e71923f86c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AFCRL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '596';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
AFC Rail Indicator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9182569d693623e6b469099542b303e4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY4';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '597';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a018a3d212081bb86b34e6b8fbd88c4e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SMUTE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '598';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Soft Mute Indicator. Indicates soft mute is engaged.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1fc4251a40ec4352f10fc3ecb20f2c79';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY5';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '599';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aedcdb3b2f6ac6daf3bacf8bb54a92d28';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STBLEND';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '601';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Indicates amount of stereo blend in% (100 = full stereo, 0 = full mono).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aece6117f0bc60ec824fe5d441abdb288';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'PILOT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '602';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Indicates stereo pilot presence.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a6833f5d3374c1679bea428b50dbad9cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSSI';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '604';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP4 - Contains the current receive signal strength (0â127 dBÎ¼V).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8dc5367d65459f69d78eb03e93f7703f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SNR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '605';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP5 - Contains the current SNR metric (0â127 dB).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a36b0ca295026d76ee15df50dc4991e90';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MULT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '606';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP6 - Contains the current multipath metric. (0 = no multipath; 100 = full multipath)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0c144971635328e95870811948c9071a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREQOFF';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '607';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RESP7 - Signed frequency offset (kHz).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '576';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_seek';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aedf91f573575f3ceb1297159f0535bf8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_seek::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '372';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a894bfdc90f00f3064991edc0c439e66a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '373';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '365';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Seek frequency (automatic tuning). ARG1.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Represents searching for a valid frequency data type AM and FM.


When AM, the searching data have to be complemented by si47x_seek_am_complement.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 72 and 137
@see si47x_seek_am_complement
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_seek.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ad8179a090910d4923b044cbce813c8ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '368';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae1c8555fcf0ea2bb648a6fd527d658c0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'WRAP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '369';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Determines whether the seek should Wrap = 1, or Halt = 0 when it hits the band limit.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aed8a1fd68dec9364930b51d020ba07d6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SEEKUP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '370';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Determines the direction of the search, either UP = 1, or DOWN = 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0b5885d29a74762639e4b55c51ce2d85';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '371';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '367';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_seek_am_complement';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a55b8606c703c038e1d4360893451711c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ARG2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '387';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a9fb726b115307ae7455d2dddba2d7d36';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ARG3';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '388';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1adc4349d375ca2c36518618625f48e4b8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '389';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd74666ecda0448b052a5ad1e9ade2d2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '390';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '386';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Seek frequency (automatic tuning) AM complement (ARG2, ARG3, ARG4 and ARG5)
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Represents AM complement searching information for a valid frequency data type.

@see  @see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 72 and 137
_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_set_frequency';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa5c0dc3dd7bde96cd11ed795d89951d6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_set_frequency::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '349';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a57e2bfb6b0c9c0fb7d6ffac131824b8a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '350';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '338';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
AM Tune frequency data type command (AM_TUNE_FREQ command)
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 135
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_set_frequency.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1adca6e617f6fb54033deb311e7e7c93cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FAST';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '341';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ARG1 - FAST Tuning. If set, executes fast and invalidated tune. The tune status will not be accurate.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1da4c7af6c0e106e2aec1c483252b329';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREEZE';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '342';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Valid only for FM (Must be 0 to AM)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '343';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always set 0.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a46ba89190297ccd0df7c8f8b5f72497f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'USBLSB';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '344';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SSB Upper Side Band (USB) and Lower Side Band (LSB) Selection. 10 = USB is selected; 01 = LSB is selected.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8836c6ec927c24305d2fd26a5aec2e2b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREQH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '345';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ARG2 - Tune Frequency High byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a858dfb4be81dfbd057aa63aded06bf3d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'FREQL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '346';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ARG3 - Tune Frequency Low byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5f437dbf77cdadcbb215ce5db44edbe6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPH';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '347';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ARG4 - Antenna Tuning Capacitor High byte.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0475bf71e813922e317ef7cb7b3df9fa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ANTCAPL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '348';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ARG5 - Antenna Tuning Capacitor Low byte. Note used for FM.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '340';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_ssb_mode';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1affb467645fbaf299d351c3fc7c0ed3bb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_ssb_mode::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'param';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '977';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ac57630fdfe3cf7069f8483a50a41c501';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '978';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '967';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
SSB - datatype for SSB_MODE (property 0x0101)

@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; page 24 
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_ssb_mode.param';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a38eda9266347ac0c0f09182baa2fefd0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AUDIOBW';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '970';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
0 = 1.2kHz (default); 1=2.2kHz; 2=3kHz; 3=4kHz; 4=500Hz; 5=1kHz
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5fd112c4d977a89cf8b7717ef0a12a9b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SBCUTFLT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '971';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SSB side band cutoff filter for band passand low pass filter.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a911ed778d046d0d22bf2df2938c1f084';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AVC_DIVIDER';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '972';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
set 0 for SSB mode; set 3 for SYNC mode;
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a55576f7d4412f08280e49fba44ef707a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'AVCEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '973';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SSB Automatic Volume Control (AVC) enable; 0=disable; 1=enable (default);.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aeb7815cb295d531065f797c39cf36da5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SMUTESEL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '974';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SSB Soft-mute Based on RSSI or SNR.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '975';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Always write 0;.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a5ff4a830553e8db4d36f8b3677e3d412';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DSP_AFCDIS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '976';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
0=SYNC MODE, AFC enable; 1=SSB MODE, AFC disable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '969';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a1ac420bbf82359094748a4f97304adb8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_status::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'refined';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '411';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8afecb26fbffbfa5a7d3d46d90becabc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '412';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '401';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Status response data representation.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Represents searching for a valid frequency data type.
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_status.refined';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1af8f21d801809287d578344911b65697c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STCINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '404';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = Tune complete has been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '405';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved (Values may vary).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a53d648e7e9d100d590e2f65ec7de079f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RDSINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '406';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = Radio data system interrupt has been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a8acf6c55c97050e7abd06c104012c77a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RSQINT';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '407';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = Received Signal Quality measurement has been triggered.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '408';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved (Values may vary).
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1acd22bad976363fdd1bfbf6759fede482';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ERR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '409';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
1 = Error.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1ae16433ffd3adc248f0ce2608a95c3c76';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '410';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
0 = Wait before sending next command; 1 = Clear to send next command.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '403';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_tune_status';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a78bd3a3ad2369186f0195223f408311d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct si47x_tune_status::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '543';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aefcfcb9eaa95ed7d8ce1740ac7f9eb7e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '544';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '537';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Seek station status.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Status of FM_TUNE_FREQ or FM_SEEK_START commands or Status of AM_TUNE_FREQ or AM_SEEK_START commands.

@see Si47XX PROGRAMMING GUIDE; AN332 (REV 1.0); pages 73 and 139
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'group__group01';
  cp-name   = 'si47x_tune_status.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1aa1b4c5526f2abe4a5d02be4016a44020';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTACK';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '540';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, clears the seek/tune complete interrupt status indicator.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a2027c027133e22c8929e2874dc44dd36';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CANCEL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '541';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
If set, aborts a seek currently in progress.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'group__group01_1a0b5885d29a74762639e4b55c51ce2d85';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      sec-mem-desc-line = '542';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  cp-fileline  = '539';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
file = {
  file-id   = '_s_i4735_8cpp';
  file-name = 'SI4735.cpp';
  file-full-name  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = '_s_i4735_8h';
  file-name = 'SI4735.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3d0f9d1b446b57f1f425654b6030fe02';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_UP_FM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '26';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SI4735 ARDUINO LIBRARY  
<br>
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This is an Arduino library for the SI47XX, BROADCAST AM/FM/SW RADIO RECEIVER IC family from Silicon Labs. 


This library is intended to provide an easier interface for controlling the SI47XX by using Arduino platform. 


The communication used by this library is I2C.


This file contains: const (#define), Defined Data type and Methods declarations


You can see a complete documentation on <https://github.com/pu2clr/SI4735>


The are more than 20 examples on <https://github.com/pu2clr/SI4735/tree/master/examples>

@see <a href="https://pu2clr.github.io/SI4735/">General Documentation</a>
@see <a href="https://pu2clr.github.io/SI4735/extras/schematic/">Schematics</a>
@see Si47XX PROGRAMMING GUIDE AN332 (Rev 1.0): https://www.silabs.com/documents/public/application-notes/AN332.pdf
@see AN332 REV 0.8 UNIVERSAL PROGRAMMING GUIDE; AMENDMENT FOR SI4735-D60 SSB AND NBFM PATCHES

@author PU2CLR - Ricardo Lima Caratti 
@date  2019-2020
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a1c63dbfe18d80af288cc79a5da666993';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_UP_AM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '27';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3adae4f49b7284531f4a9f74e64aae1d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_UP_WB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '28';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a2e49c8fada1fbb8a01ad5a0adad2b559';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_PATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
15
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '29';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a501219f4a661e7aee098f263cba5d2a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_ADDR_SEN_LOW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '32';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a16a01f9b53951b9796f59e48eb28c435';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_ADDR_SEN_HIGH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x63
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '33';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1abf6b929a6f72c48fdb78218394541db2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_UP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x01
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '35';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9fbb31eec68a8b17895fd18640296013';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GET_REV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '36';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aad04e0c9afdeec307d5b9cb2062d784d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'POWER_DOWN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '37';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a92cfecd26935c8864d65bbdc6031acb0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SET_PROPERTY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '38';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1acf7a3971c551fcdf7ae16bb0f31c149d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GET_PROPERTY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '39';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab34642df1357e9ee8ecd90913bdae01f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GET_INT_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x14
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '40';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aa9acf37dc2ae6e26a01780d6d4e6dcc1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_TUNE_FREQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x20
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '43';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a25ef5653fc9206ab83d8215c209e9922';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_START';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x21
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '44';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a1c2be0c09ef2120b4e7b6d050a4a7735';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_TUNE_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x22
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '45';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac5bbf51a4a4b25c538375567c2f4c8dc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_AGC_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x27
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '46';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a805bf3e7373f81190388810992fa17ae';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_AGC_OVERRIDE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x28
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '47';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9b58aeaeabdad7b1525ccc31f5d0d201';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RSQ_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x23
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '48';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac37ef03bb47367289779f5f9bc00b18f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RDS_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x24
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '49';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a4c03a2d5603fb8c20d665ca2970a66df';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_NB_DETECT_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1900
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '51';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab3287830ac7ffa34372c528718895cc3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_NB_INTERVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1901
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '52';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac8c0fc66f42d75830c0f5a5e2a701a4c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_NB_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1902
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '53';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a89dc1f32bbc85c08ab1f7c4b8435cb4d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_NB_IIR_FILTER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1903
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '54';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ad928830f26b8c05e93c3926ebf0760fc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_NB_DELAY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1904
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '55';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8b7e6ccffb54cef940f3bd78d255bc36';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RDS_INT_SOURCE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1500
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1afdc3800cf259f4c1acb254d1ad61f21b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RDS_INT_FIFO_COUNT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1501
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '59';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1afbaa25e11748b1bd64456d3eae79fdee';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RDS_CONFIG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1502
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6651f2bcc216c9b0950999f70bf2be44';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_RDS_CONFIDENCE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1503
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '61';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9fe700fb45d6e08e177da6fdc208fa05';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_DEEMPHASIS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '63';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a83ad68095d43d1a6d7b27941ef5b7f42';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_STEREO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1105
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '64';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8cad5bb93cc48ad53d80ccbb35228cbd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_MONO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1106
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1abf0ee031cf6bb27b0211709117cfcaf0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_RSSI_STEREO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1800
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '66';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8f62bfa609e4deb9febe3a25aae3c6bc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_RSSI_MONO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1801
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a95851f3d5c99cdbb6ec4c605868dea8d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_SNR_STEREO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1804
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '68';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a29369a40b1406afc79b772ed939dab45';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_SNR_MONO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1805
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a89a1ff203b89d700e362d30059a13963';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_MULTIPATH_STEREO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1808
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '70';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a775be7c1521bbdd8d33fdecc34772c1f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_BLEND_MULTIPATH_MONO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1809
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1afbd0f546e5ae1646846a50f158e2f20e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_CHANNEL_FILTER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1102
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '72';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8befb9228ad41e2baa0e69411e0f5108';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SOFT_MUTE_MAX_ATTENUATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1302
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a17c1d20d698569b77c2d00fb03fc905a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_BAND_BOTTOM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1400
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '76';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ae8f8164aecb98eb67811957866f7173a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_BAND_TOP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1401
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac5a0322f265c6a26f2eaa67b137a4e1e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_FREQ_SPACING';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1402
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '78';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aa252fd7579dcf146a8b33544c76d0e93';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_TUNE_SNR_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1403
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '79';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a960bbbda65e9a333eec9ad65a5d32af5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_SEEK_TUNE_RSSI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1404
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a357f7497b6223fcd4a12503c70adbc3a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_TUNE_FREQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x50
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6fe25ebe601c278451f6c04271508198';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_TUNE_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x52
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a67aab397bc97b0088bb5431fdbcf0d04';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x53
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '86';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac6c56c06b2658d67e2821f3ec3049d4c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_AGC_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x57
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '87';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a69345cff1713682fe7d18017aacf6b52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_AGC_OVERRIDE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x58
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '88';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a40829e3d25effd5d3db274d26a6b0104';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_MAX_TUNE_ERROR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5108
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '93';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1af297afebc4cdc3bf5c269d3c896b1d19';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_INT_SOURCE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5200
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '94';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6f3c26bda79e601fcfc8d4367d4abaa4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_SNR_HI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5201
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '95';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a7e9a2026f3286eda50506896a4f3c7f4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_SNR_LO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5202
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '96';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aea5f5a414b0313058756bd6bacefeae4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_RSSI_HI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5203
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '97';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a83644de2c7b22ba090798461a16a7768';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_RSQ_RSSI_LO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5204
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '98';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a7b58779dff47163f36cf145497539d47';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_VALID_SNR_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5403
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '99';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a0d81d4f32ba27c04821a0b28b0497b98';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_VALID_RSSI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5404
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '100';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5c3e83244b4ab4a76d9c5c1ed86f3a54';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_TUNE_FREQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x40
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '104';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ad6a22dca7973aef0bd45ed7adbd72a35';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_START';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x41
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '105';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ae08ea65cd9de522d012b7867da9ded6b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_TUNE_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x42
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '106';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a54146d0cab2573ea21cf4e95d2317fcb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x43
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '107';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a0a7dcdb2acffb213a5c11abd3ed96297';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_AGC_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x47
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '108';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a2b26f91fc9564254afd58904239f7645';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_AGC_OVERRIDE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x48
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '109';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ac4ede73dbac84ceab4a5bc876104bc20';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GPIO_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '110';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aee1a56baeb6b8457fb722fd36dad5bbf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GPIO_SET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x81
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '111';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab74735968edb90553a802c24ff568614';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_TUNE_FREQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x40
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '115';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ad1f18cf2de7dc536a84a03d2152d718d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_TUNE_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x42
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '116';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a22906edd0b4fc07bf508547fac5218a2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x43
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '117';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a09d9c252c276ecbcefede258a0246b28';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_AGC_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x47
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '118';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab7e181e3a172ee8e798cd5bd59566ce9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_AGC_OVERRIDE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x48
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '119';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9c2e283ffdf9f900c3e35bc90f25a8ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DIGITAL_OUTPUT_FORMAT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0102
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '123';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8c9168f6aa8868f2595020555380514a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DIGITAL_OUTPUT_SAMPLE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0104
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '124';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1adb330b20b383f5f664a9b107edef0036';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REFCLK_FREQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0201
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '125';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6b615b86f7870b616243b25cb5091933';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REFCLK_PRESCALE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0202
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '126';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a0031abcfb4699f5db24b7a8c1ec7ba82';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_DEEMPHASIS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '127';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a4a220091c92c619ac986d574a616b2cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_CHANNEL_FILTER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3102
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '128';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3375102015ee9e764639093c878f764e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_AUTOMATIC_VOLUME_CONTROL_MAX_GAIN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3103
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '129';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9ee081d06ef0cdb3098cf762a7128ef3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_MODE_AFC_SW_PULL_IN_RANGE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3104
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '130';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a58e12f82db7a81eccf75d4490c44115d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_MODE_AFC_SW_LOCK_IN_RANGE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3105
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '131';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8e6ffbd2ef006ca66d8d665d0778767b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_INTERRUPTS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3200
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '132';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aba5b2234f0511541a31c570b7174d697';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_SNR_HIGH_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3201
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '133';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3b36333a8e4d89d74dffc7e49a2cad62';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_SNR_LOW_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3202
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '134';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6d42dbe4fca531b64addfd693393263f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_RSSI_HIGH_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3203
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '135';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a080a16332ef646146908f397ebf30ab8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_RSQ_RSSI_LOW_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3204
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '136';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab99cdb1908b382e8398decd8fb455fa8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3300
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '137';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a2d531456d92913b07a7c60b9080a691a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_SLOPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3301
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '138';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a57030e143a5efa06b9b9cc21b63d0b70';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_MAX_ATTENUATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3302
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '139';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ab089c66d524223acdad68bfd970603cc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_SNR_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3303
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '140';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1adafa43d9bd0141c5f486dc86712df3db';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_RELEASE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3304
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '141';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1abb6141bfa732621e16579ccd167b60a1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SOFT_MUTE_ATTACK_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3305
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '142';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1af58375b1c0d63c805c0e0302d3b21dec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_BAND_BOTTOM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3400
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '143';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a286e6d75f19118140fb195d843533a9c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_BAND_TOP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3401
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '144';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5a42cce20a54aaf19bca033f337b857e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_FREQ_SPACING';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3402
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '145';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a40276eb2a5324bf475b621fdb740e084';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_SNR_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3403
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '146';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aafd79dd6f3ecf16693f037306df552c7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_SEEK_RSSI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3404
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '147';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ae666699a32a73aa42b896e14f397de0d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_AGC_ATTACK_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3702
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '148';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a801f8c099cb01c460ea967582d24257a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_AGC_RELEASE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3703
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '149';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5d08e0a70499dcdfb14908c93c537eae';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_FRONTEND_AGC_CONTROL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3705
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '150';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a246c2a5d194238315c8a11e1ce0cab41';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_NB_DETECT_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3900
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '151';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a33559dd526d6129ca961d439d2666e27';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_NB_INTERVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3901
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '152';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a836d43df398f26634c47466325c5c7b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_NB_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3902
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '153';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aab0c7e7860e4125cfeb21f80d8e21ca3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_NB_IIR_FILTER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3903
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '154';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a2fb502c3bf4cdcfca3e8a137d94ca2b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_NB_DELAY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3904
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '155';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aeb1de40ffb7cb51cf4a151f5d1b746d7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RX_VOLUME';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '157';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5d8cbc8d5c6630e874f1f8b14b897be2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RX_HARD_MUTE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '158';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a16b9c6d556c2db79e8742267daf63c83';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GPO_IEN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '163';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a23bef04406610ba7a5e2ae8c90126248';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_BFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '164';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a232ca41189bd93729bf9139c61e612f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0101
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '165';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1acc58d23f469da25fd41ea155b7881f57';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_INTERRUPTS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3200
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '166';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a4cf19f6f3bf71f4379bfaa64bdcf5454';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_SNR_HI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3201
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '167';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1adcca6da5b85c30212ae37ff9ad4d376c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_SNR_LO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3202
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '168';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ae39274a8fd021005801097d34fe910bf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_RSSI_HI_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3203
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '169';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a63a00c41ed12e4f5ca589989d32f692e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RSQ_RSSI_LO_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3204
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '170';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1af94a06f82ac4e6760f2cffdb485f26bc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_SOFT_MUTE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3300
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '171';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1adde1eb5f88b07d793cfea70d7fe3266f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_SOFT_MUTE_MAX_ATTENUATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3302
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '172';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9d13509e672ac034bf05727a1bf86483';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_SOFT_MUTE_SNR_THRESHOLD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3303
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '173';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3f0f97b4eb1221d0d9e098fec51598a7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RF_AGC_ATTACK_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3700
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '174';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5a63b197bde5107c033b2f46636017e5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RF_AGC_RELEASE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3701
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '175';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6f15c34efd3b10497b1d4fcb01768f32';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_IF_AGC_RELEASE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3703
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '176';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a8171c8f6d4571d5e81fa7117480035ff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_IF_AGC_ATTACK_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3702
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '177';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aa17a96499141a4e8f7487044e123d721';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RF_IF_AGC_ATTACK_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3702
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '180';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3cc8a8e7a441d49ad45f56f75544c6e7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_RF_IF_AGC_RELEASE_RATE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3703
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '181';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6c1cf039ba7ea7e5c0cce10943a18e3b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'LSB_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '184';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a551c8ca21f0924d285ffba7169674775';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'USB_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '185';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a792719d21b8eef8c5b8ec952c3587e88';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_RDS_OUTPUT_ONLY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b00000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '188';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1afd6b0255af56b3deee67ef1fe14d2fd6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_ANALOG_AUDIO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b00000101
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '189';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a0755e3202d03916bbe34391406406d97';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_DIGITAL_AUDIO1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b00001011
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '190';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ad6bd5d9d7f42b6a6a0594f74515224f3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_DIGITAL_AUDIO2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b10110000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '191';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a5492499e6d7c01e2a503882112b96b5b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SI473X_ANALOG_DIGITAL_AUDIO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0b10110101
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '192';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1aca16710d5708c296b0aee577ac4dbe12';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FM_CURRENT_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '195';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3c1a90b99ac7623ed1c7375c419f91db';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'AM_CURRENT_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '196';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1ad884de6a9db83f089883aaf52e5efc77';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSB_CURRENT_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '197';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a532eb0bcb71f6af702c41b93c27b119a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NBFM_CURRENT_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '198';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a6af70605e17fdcdeea166d59672d2a54';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SEEK_UP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '200';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a73871eb4fd3cf8830e9e23b44c0d9e71';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SEEK_DOWN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '201';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a3d77e4d0458eed0b6ba584c737e8df21';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MAX_DELAY_AFTER_SET_FREQUENCY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
30
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '203';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a921cafdf244d2d7db9eeffa524e11663';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MAX_DELAY_AFTER_POWERUP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '204';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a166d7b31e78d530aba242e50dd903de4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIN_DELAY_WAIT_SEND_LOOP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
300
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '205';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1acc98e8d3badddd21bc528451bb718f82';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MAX_SEEK_TIME';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '206';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a35d886cf426a77fedcb8b9784b821199';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DEFAULT_CURRENT_AVC_AM_MAX_GAIN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
36
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '208';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a33a17dceb88b2b05d8032714a1998368';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'XOSCEN_CRYSTAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '210';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = '_s_i4735_8h_1a9d2a0e22f5a37d3911eef36581225dd2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'XOSCEN_RCLK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
      define-mem-desc-line = '211';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4735/SI4735/SI4735.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
